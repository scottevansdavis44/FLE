function LocationFormatter() { } function eh(a, b) { log((new Error).stack); var c = "There was an error on this page.<br /><br />"; dojo.isIE && (c += "<b>Error description:</b> " + a.description + "<br />"), c += "<b>Error name:</b> " + a.name + "<br />", c += "<b>Error message:</b> " + a.message + "<br />", dojo.isIE && (c += "<b>Error number:</b> " + a.number + "<br />"), dojo.isFF && (c += "<b>Line number:</b> " + a.lineNumber + "<br />"), dojo.isSafari && (c += "<b>Line number:</b> " + a.line + "<br />"), c += "<b>Function:</b> " + b + "<br /><br />", c += "Click OK to continue.", hideWorking(), myAlert(c) } function myAlert(a) { hideWorking(), dojo.byId("divMessage").innerHTML = a, dijit.byId("dialogAlertMessage").show(), log(a) } function myInfo(a) { hideWorking(), dojo.byId("divInformation").innerHTML = a, dijit.byId("dialogInformationMessage").show(), log(a) } function log(a) { debugMode && console.log(a) } function showWorking2() { dojo.byId("divWorking").style.display = "block" } function hideWorking2() { dojo.byId("divWorking").style.display = "none" } function showWorking(a) { dojo.byId("divLoadingIndicator").style.display = "block", dojo.byId("loadingMessage").innerHTML = a, log(a) } function updateWorking(a) { dojo.byId("loadingMessage").innerHTML = a, dojo.byId("divLoadingIndicator").style.opacity = parseFloat(dojo.byId("divLoadingIndicator").style.opacity) - .1, log(a) } function hideWorking() { dojo.byId("divLoadingIndicator").style.display = "none" } function showStartDate() { dijit.byId("dttStartDate") ? dijit.byId("dttStartDate").set("value", startDate) : require(["dijit/Calendar"], function (a) { new a({ id: "dttStartDate", value: startDate, isDisabledDate: function (a) { var a = new Date(a); return a.setHours(0, 0, 0, 0), a > new Date }, getClassForDate: function (a) { var a = new Date(a); if (a.setHours(0, 0, 0, 0), a >= startDate && a <= endDate) return "red" }, onChange: function (a) { var b = a; b.setHours(0, 0, 0); var c = new Date(b.getFullYear(), b.getMonth(), b.getDate()); return add = reportDays - 1, c.setTime(b.getTime() + 24 * add * 60 * 60 * 1e3), today = new Date, c > today ? void myAlert("Last day of reporting period cannot be greater than today.") : void (dojo.byId("lblDateRangeUser").innerHTML = "Reporting period will be from " + convertUTCToDate(b) + " to " + convertUTCToDate(c)) } }, "tdStartDate").startup() }), dojo.byId("lblDateRangeUser").innerHTML = "Reporting period will be from " + convertUTCToDate(startDate) + " to " + convertUTCToDate(endDate), dijit.byId("divStartDate").show() } function cancelStartDate(a) { dojo.byId("lblDateRangeUser").innerHTML = "", dijit.byId("divStartDate").hide() } function closeStartDate(a) { var b = dijit.byId("dttStartDate").get("value"); b.setHours(0, 0, 0); var c = new Date(b.getFullYear(), b.getMonth(), b.getDate()); if (add = reportDays - 1, c.setTime(b.getTime() + 24 * add * 60 * 60 * 1e3), today = new Date, c > today) return void myAlert("Last day of reporting period cannot be greater than today."); map.infoWindow.hide(), deactivateToolbars("measure"), map.getLayer("glmeasure").clear(), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|glmeasure"), deactivateToolbars("draw"), map.getLayer("gldraw").clear(), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|gldraw"), toggleAllEventLayersOff(), dijit.byId("dialogTable").hide(), closeChartPane(), childWindow && (childWindow.window && childWindow.close(), childWindow = null), qz = dijit.byId("dttQuickZoom").getOptions(0), dijit.byId("dttQuickZoom").set("value", qz.value), dijit.byId("divStartDate").hide(), showWorking2(); var d = getUserVars(b, c); d.then(function (a) { dataConfig = a.groups, startDate = new Date(a.startDate), endDate = new Date(a.endDate), buildWeekWidget(a), dttWeek_OnChange([convertUTCToDate(startDate), convertUTCToDate(endDate)]), hideWorking2() }, function (a) { hideWorking2(), log("Error: ", a.message) }) } function getUserVars(a, b) { return esri.request({ url: soeURL + "getUserVariables", content: { sdate: convertUTCToDate(a), edate: convertUTCToDate(b), f: "json" }, callbackParamName: "callback" }) } function startApp() { updateWorking("acquiring variables and summaries ..."); var a = getVars(); a.then(function (a) { dataConfig = a.groups, proxyUrl = a.proxyUrl, alwaysUseProxy = a.alwaysUseProxy, soeURL = a.soeURL, reportDays = a.reportDays, startDayOfWeek = a.startDayOfWeek, overlayMapSevice = a.overlayMapSevice, quickZoomLayer = a.quickZoomLayers, locatorSources = a.locatorSources, endDate = new Date(a.endDate), startDate = new Date(a.startDate), buildWeekWidget(a), create_doc(a) }) } function getVars() { return esri.request({ url: "./json/compstat.json", handleAs: "json" }) } function create_doc(a) { try { updateWorking("loading application ..."); var b = "onorientationchange" in window, c = b ? "orientationchange" : "resize"; window.addEventListener(c, function () { log("Orientation changed: " + window.orientation), map && (map.infoWindow.hide(), map.reposition(), map.resize()) }, !1), esri.config.defaults.io.proxyUrl = proxyUrl, esriConfig.defaults.io.alwaysUseProxy = alwaysUseProxy, updateWorking("loading popup window ..."), popup = new esri.dijit.Popup({ offsetX: 0, offsetY: 0, highlight: !0, titleInBody: !1, visibleWhenEmpty: !isMain, closestFirst: !0, markerSymbol: new esri.symbol.SimpleMarkerSymbol("circle", 26, null, new esri.Color([0, 0, 0, .25])) }, dojo.create("div")), isMain || popup.resize(500, 300), popup.on("hide", function () { log("popup hide"), isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "popupHide|xxx") }), popup.on("show", function () { isMain && childWindow && childWindow.window && (graphic = popup.getSelectedFeature(), graphic && (numofnum = popup.features.length > 1 ? " (" + (popup.selectedIndex + 1) + " of " + popup.features.length + ")" : " ", childWindow.$(childWindow.document).trigger("childWindow", "popupShow|" + dojo.toJson(graphic.geometry.toJson()) + "|" + graphic.getContent() + "|" + numofnum))) }), popup.on("selection-change", function (a) { if (isMain && childWindow && childWindow.window && map.infoWindow.isShowing && a.target.selectedIndex > -1 && null != a.target.features) { var b = a.target.getSelectedFeature(); b && (numofnum = a.target.features.length > 1 ? " (" + (a.target.selectedIndex + 1) + " of " + a.target.features.length + ")" : " ", childWindow.$(childWindow.document).trigger("childWindow", "popupMove|" + dojo.toJson(b.geometry.toJson()) + "|" + b.getContent() + "|" + numofnum)) } }), updateWorking("loading map ..."), map = new esri.Map("map", { basemap: "streets", logo: !1, slider: isMain, sliderStyle: "small", nav: !1, infoWindow: popup, autoResize: !0, showAttribution: !1, extent: useESRIBaseMaps ? new esri.geometry.Extent(geoXMin, geoYMin, geoXMax, geoYMax, new esri.SpatialReference(102100)) : new esri.geometry.Extent(geoXMin, geoYMin, geoXMax, geoYMax, new esri.SpatialReference(refScale)) }), map.disableRubberBandZoom(), map.disableClickRecenter(), map.disableDoubleClickZoom(), map.disableShiftDoubleClickZoom(), map.on("layers-add-result", onLayersAddResult), map.on("extent-change", function (a) { try { map.infoWindow.isShowing && map.infoWindow.hide(), isMain && (deactivateToolbars("all"), map.getLayer("glmeasure").clear()), log("map extent-change") } catch (a) { eh(a, "extent-change") } }), map.on("zoom-end", function (a) { try { isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "extent|" + dojo.toJson(a.extent.toJson())) } catch (a) { eh(a, "zoom-end") } }), map.on("pan-end", function (a) { try { isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "extent|" + dojo.toJson(a.extent.toJson())) } catch (a) { eh(a, "pan-end") } }), map.on("key-up", function (a) { switch (a.keyIdentifier) { case "Insert": useESRIBaseMaps ? map.setExtent(new esri.geometry.Extent(XMin, YMin, XMax, YMax, new esri.SpatialReference(102100))) : map.setExtent(new esri.geometry.Extent(XMin, YMin, XMax, YMax, new esri.SpatialReference(refScale))); break; case "U+005A": map.setLevel(map.getLevel() + 1); break; case "U+0058": map.setLevel(map.getLevel() - 1) } }), map.on("load", function (a) { log("map loading") }), map.on("update-start", function () { log("map update started") }), map.on("update-end", function (a) { log("map update ended") }), overlayMapServiceLayer = new esri.layers.ArcGISDynamicMapServiceLayer(overlayMapSevice, { id: "overlayMapServiceLayer", opacity: .4, visible: !0 }), layersToAdd.push(overlayMapServiceLayer), refScale = overlayMapServiceLayer.spatialReference.wkid ? refScale = overlayMapServiceLayer.spatialReference.wkid : refScale = overlayMapServiceLayer.spatialReference.wkt, layersToAdd.push(new esri.layers.GraphicsLayer({ displayOnPan: !1, id: "glhilite", visible: !0, opacity: .9 })), layersToAdd.push(new esri.layers.GraphicsLayer({ displayOnPan: !1, id: "gldraw", visible: !0, opacity: .9 })), layersToAdd.push(new esri.layers.GraphicsLayer({ displayOnPan: !1, id: "glmeasure", visible: !0, opacity: .9 })), isMain || layersToAdd.push(new esri.layers.GraphicsLayer({ displayOnPan: !1, id: "glsearch", visible: !0, opacity: 1 })), updateWorking("loading geometry service ..."), geometryService = new esri.tasks.GeometryService(a.geoService), updateWorking("loading event types ..."); var d = loadTypes(); d.then(function (a) { updateWorking("loading layers ..."), map.addLayers(layersToAdd) }), isMain && ($(document).bind("mainWindow", function (a, b) { var c = b.split("|"); switch (c[0]) { case "point": new esri.geometry.Point(parseFloat(c[1]), parseFloat(c[2]), new esri.SpatialReference(refScale)), new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_SQUARE, 16, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 1), new dojo.Color([255, 255, 0, 1])) } }), window.onbeforeunload = function () { childWindow && childWindow.window && (dojo.isChrome && dojo.cookie("holdChildLocation_Chrome", dojo.toJson("holdChildLocation|" + childWindow.screenY + "|" + childWindow.screenX + "|" + childWindow.outerWidth + "|" + childWindow.outerHeight), { expires: 365 }), dojo.isIE && dojo.cookie("holdChildLocation_IE", dojo.toJson("holdChildLocation|" + childWindow.screenY + "|" + childWindow.screenX + "|" + childWindow.outerWidth + "|" + childWindow.outerHeight), { expires: 365 }), dojo.isFF && dojo.cookie("holdChildLocation_FF", dojo.toJson("holdChildLocation|" + childWindow.screenY + "|" + childWindow.screenX + "|" + childWindow.outerWidth + "|" + childWindow.outerHeight), { expires: 365 }), childWindow.close()) }) } catch (a) { eh(a, "create_doc") } } function onLayersAddResult(a) { try { dojo.map(a.layers, function (a) { return a.success || eh(a.error, "onLayerLoad"), updateWorking("loaded map layer " + a.layer.id), a.layer }); if (geoExtent = useESRIBaseMaps ? new esri.geometry.Extent(geoXMin, geoYMin, geoXMax, geoYMax, new esri.SpatialReference(102100)) : new esri.geometry.Extent(geoXMin, geoYMin, geoXMax, geoYMax, new esri.SpatialReference(refScale)), isMain) { var c = new esri.dijit.HomeButton({ map: map, extent: geoExtent }, "btnHome"); c.startup(), c.on("home", function (a) { try { isMain && (childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "hilite_clear|nothing"), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|glmeasure")) } finally { map.getLayer("glhilite").clear(), deactivateToolbars("all") } }), require(["dojo/on", "dojo/dom", "esri/toolbars/draw", "dojox/widget/ColorPicker"], function (a, b, c, d) { var e = new d({ id: "pickColor", animatePoint: !0, showHex: !1, showHsv: !1, showRgb: !1, value: "#FF0000", onChange: function (a) { dojo.byId("finalColor").style.backgroundColor = a } }); dijit.byId("btnColorPicker").set("dropDown", e), drawtoolbar = new c(map), drawtoolbar.on("draw-end", function (a) { map.infoWindow.hide(), symbol = null, r = hexToRgb(dijit.byId("pickColor").get("value")), "point" === a.geometry.type || "multipoint" === a.geometry.type ? (shadow = "M 20.257396,4.6372091 18.673412,17.629397 5.6382559,18.748537 31.073802,37.152834 20.72224,43.379397 49.448802,49.514162 44.337474,20.586428 37.74763,30.709475 20.257396,4.6372091 Z", ssymbol = new esri.symbol.SimpleMarkerSymbol, ssymbol.setPath(shadow), ssymbol.setColor(new dojo.Color([48, 48, 40, .3])), ssymbol.setOutline(null), ssymbol.setSize(50), ssymbol.setOffset(-22, 30), map.getLayer("gldraw").add(new esri.Graphic(a.geometry, ssymbol)), path = "M 20.257396,4.6372091 18.673412,17.629397 5.6382559,18.748537 31.073802,37.152834 20.72224,43.379397 49.448802,49.514162 44.337474,20.586428 37.74763,30.709475 20.257396,4.6372091 Z", symbol = new esri.symbol.SimpleMarkerSymbol, symbol.setPath(path), symbol.setColor(new dojo.Color([r[0], r[1], r[2]])), symbol.setOutline(null), symbol.setSize(50), symbol.setOffset(-25, 25)) : "line" === a.geometry.type || "polyline" === a.geometry.type ? symbol = new esri.symbol.CartographicLineSymbol(esri.symbol.CartographicLineSymbol.STYLE_SOLID, new dojo.Color([r[0], r[1], r[2]]), 2, esri.symbol.CartographicLineSymbol.CAP_ROUND, esri.symbol.CartographicLineSymbol.JOIN_ROUND) : symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([r[0], r[1], r[2]]), 1), new dojo.Color([r[0], r[1], r[2], .4])), map.getLayer("gldraw").add(new esri.Graphic(a.geometry, symbol)), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw|" + dojo.toJson(a.geometry.toJson()) + "|" + r[0] + "|" + r[1] + "|" + r[2]) }), a(b.byId("drawTool"), "click", function (a) { if ("drawTool" !== a.target.id && "" !== a.target.id) if ("draw_Cancel" === a.target.id) map.getLayer("gldraw").clear(), deactivateToolbars("draw"), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|gldraw"); else { deactivateToolbars("all"), dojo.byId(a.target.id).src = "img/" + a.target.id + "_active.png"; var b = a.target.alt.toLowerCase(); switch (b) { case "point": esri.bundle.toolbars.draw.addPoint = "Click to show arrow"; break; case "circle": esri.bundle.toolbars.draw.addShape = "Press down at circle center to start", esri.bundle.toolbars.draw.start = "Relaese mouse button to finish circle"; break; case "freehandpolygon": esri.bundle.toolbars.draw.addShape = "Press down to start polygon", esri.bundle.toolbars.draw.start = "Relaese mouse button to finish polygon" } map.disableMapNavigation(), drawtoolbar.activate(b) } }), measuretoolbar = new c(map), measuretoolbar.on("draw-end", onDrawEnd_Measure), a(b.byId("measureTool"), "click", function (a) { if (console.dir(esri.bundle), "measureTool" !== a.target.id && "" !== a.target.id) if ("mea_Cancel" === a.target.id) deactivateToolbars("measure"), map.getLayer("glmeasure").clear(), map.infoWindow.hide(), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|glmeasure"); else { map.getLayer("glmeasure").clear(), deactivateToolbars("all"), dojo.byId(a.target.id).src = "img/" + a.target.id + "_active.png"; var b = a.target.alt.toLowerCase(); switch (b) { case "point": esri.bundle.toolbars.draw.addPoint = "Click to show latitude/longitude"; break; case "polyline": esri.bundle.toolbars.draw.start = "Click to start measure polyline length", esri.bundle.toolbars.draw.finish = "Double-click to finish measure"; break; case "polygon": esri.bundle.toolbars.draw.start = "Click to start measure polygon area", esri.bundle.toolbars.draw.resume = "Click to continue", esri.bundle.toolbars.draw.finish = "Double-click to finish measure" } childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|glmeasure"), map.infoWindow.hide(), map.disableMapNavigation(), measuretoolbar.activate(b) } }) }), require(["esri/dijit/Search"], function (a) { var b = new a({ enableButtonMode: !1, enableLabel: !0, enableInfoWindow: !0, showInfoWindowOnSelect: !1, autoNavigate: !1, map: map }, "search"); b.on("select-result", function (a) { "point" === a.result.feature.geometry.type ? map.setExtent(a.result.extent.expand(2), !0) : map.setExtent(a.result.extent, !0), isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "search|" + a.result.name + "|" + dojo.toJson(this.labelGraphic.geometry.toJson()) + "|" + dojo.toJson(a.result.feature.geometry.toJson())) }), b.on("clear-search", function () { isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "search_clear|nothing") }); var c = []; dojo.forEach(locatorSources, function (a) { c.push({ locator: new esri.tasks.Locator(a.locator), singleLineFieldName: a.singleLineFieldName, outFields: a.outFields.split(","), name: a.name, placeholder: a.placeholder }) }), dojo.forEach(searchSources, function (a) { c.push({ featureLayer: new esri.layers.FeatureLayer(overlayMapSevice + "/" + a.layer), searchFields: a.searchFields, displayField: a.displayField, exactMatch: a.exactMatch, outFields: a.outFields, name: a.name, placeholder: a.placeholder, maxResults: a.maxResults, maxSuggestions: a.maxSuggestions, infoTemplate: new esri.InfoTemplate(a.infoTemplateTitle, a.infoTemplate), enableSuggestions: a.enableSuggestions, minCharacters: a.minCharacters, highlightSymbol: new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_NULL, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 255, 0, .5]), 2)) }) }), b.set("sources", c), b.startup() }), constructBasemap(), createNewTOC(), createToolTips(); var d = []; dojo.forEach(quickZoomLayer, function (a) { a.geos = [], d.push(quickZoomLayerQuery(a)) }); var e = []; updateWorking("constructing quick zoom items"); var f = new dojo.DeferredList(d); f.then(function (a) { dojo.forEach(a, function (a, b) { a[0] && (orig = { value: b + "_ALL", label: "<div class='quickZoom'>" + quickZoomLayer[b].displayHeader + "</div>", selected: 0 == b }, quickZoomLayer[b].geos.push({ geo: dojo.toJson(new esri.geometry.Extent(XMin, YMin, XMax, YMax, new esri.SpatialReference(102100))), name: "ALL", qzl: b }), e.push(orig), dojo.forEach(a[1].features, function (a, c) { e.push({ value: b + "_" + c, label: quickZoomLayer[b].displayName + ": " + a.attributes[quickZoomLayer[b].queryField], selected: !1 }), quickZoomLayer[b].geos.push({ geo: dojo.toJson(a.geometry.toJson()), name: a.attributes[quickZoomLayer[b].queryField], qzl: b }) })) }), sel = new dijit.form.Select({ id: "dttQuickZoom", name: "dttQuickZoom", style: "width: 150px !important", autoWidth: !1, maxHeight: 200, options: e, value: e[0].value, onChange: function (a) { if (a) { ary_evt = a.split("_"), qk = quickZoomLayer[parseInt(ary_evt[0])]; try { isMain && (childWindow && childWindow.window && ("ALL" != ary_evt[1] ? childWindow.$(childWindow.document).trigger("childWindow", "hilite|" + qk.geos[parseInt(ary_evt[1]) + 1].geo + "|" + qk.geos[parseInt(ary_evt[1]) + 1].name + "|" + ary_evt[0]) : childWindow.$(childWindow.document).trigger("childWindow", "hilite|" + qk.geos[0].geo + "|" + qk.geos[0].name + "|" + ary_evt[0])), "visible" == dojo.byId("chartPaneMain").style.visibility && closeChartPane()) } finally { var b = null; map.getLayer("glhilite").clear(); var c = []; dlayer = map.getLayer("overlayMapServiceLayer"), vislayers = dlayer.visibleLayers, dojo.forEach(quickZoomLayer, function (a) { id = a.layerIndex, id != qk.layerIndex ? vislayers.indexOf(id) > -1 && (vislayers.splice(vislayers.indexOf(id), 1), dijit.byId("overlayMapServiceLayer-" + id + "-CHK").set("checked", !1)) : vislayers.indexOf(id) == -1 && (vislayers.push(id), dijit.byId("overlayMapServiceLayer-" + id + "-CHK").set("checked", !0)) }), dlayer.setVisibleLayers(vislayers, !0), isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "visibleLayers|" + dojo.toJson(vislayers)), "ALL" != ary_evt[1] ? (b = esri.geometry.fromJson(dojo.fromJson(qk.geos[parseInt(ary_evt[1]) + 1].geo)), c[qk.layerIndex] = qk.queryField + " = '" + qk.geos[parseInt(ary_evt[1]) + 1].name + "'", map.getLayer("glhilite").add(new esri.Graphic(b, new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_NULL, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0, .5]), 2), null)))) : (b = esri.geometry.fromJson(dojo.fromJson(qk.geos[0].geo)), c[qk.layerIndex] = "1=1"), map.setExtent(b.getExtent(), !0), map.getLayer("overlayMapServiceLayer").setLayerDefinitions(c), dojo.byId("selectLocationType") && (dijit.byId("selectLocationType").set("value", ""), RemoveChildren(dojo.byId("locateList"))) } } } }), dojo.byId("tdQuickZoom").appendChild(sel.domNode), sel.startup(), map.getLayer("glhilite").clear(), hideWorking() }) } else map.getLayer("glhilite").clear(), hideWorking() } catch (a) { eh(a, "onLayersAddResult") } } function findLayerId(a, b) { for (var c = 0; c < a.length; c++) if (a[c].Label === b) return a[c]; throw "Couldn't find object with label: " + b } function createToolTips() { new dijit.Tooltip({ connectId: ["basemaps"], position: ["above"], label: "Basemaps" }), new dijit.Tooltip({ connectId: ["childOnOff"], position: ["below"], label: "Toggle child window on/off" }), new dijit.Tooltip({ connectId: ["imgOnOff"], position: ["below"], label: "Toggle all layers off" }), new dijit.Tooltip({ connectId: ["imgStartDate"], position: ["below"], label: "Specify custom reporting period" }), new dijit.Tooltip({ connectId: ["draw_Arrow"], position: ["below"], label: "Draw arrow" }), new dijit.Tooltip({ connectId: ["draw_Circle"], position: ["below"], label: "Draw circle" }), new dijit.Tooltip({ connectId: ["draw_FreehandPolygon"], position: ["below"], label: "Draw freehand polygon" }), new dijit.Tooltip({ connectId: ["draw_Cancel"], position: ["below"], label: "Clear/cancel graphics" }), new dijit.Tooltip({ connectId: ["mea_Point"], position: ["below"], label: "Measure latitude/longitude" }), new dijit.Tooltip({ connectId: ["mea_Polyline"], position: ["below"], label: "Measure polyline length" }), new dijit.Tooltip({ connectId: ["mea_Polygon"], position: ["below"], label: "Measure polygon area" }), new dijit.Tooltip({ connectId: ["mea_Cancel"], position: ["below"], label: "Clear/cancel measure" }) } function quickZoomLayerQuery(a) { var b = new esri.tasks.QueryTask(overlayMapSevice + "/" + a.layerIndex), c = new esri.tasks.Query; return c.returnGeometry = !0, c.outSpatialReference = map.spatialReference, c.outFields = [a.queryField], c.where = a.queryField + " IS NOT NULL", c.orderByFields = [a.queryField + " ASC"], b.execute(c) } function constructBasemap() { try { var a = new esri.dijit.BasemapGallery({ showArcGISBasemaps: !0, map: map }, "divMobileBasemap"); a.startup(), a.on("error", function (a) { myAlert(a.error) }), a.on("selection-change", function () { var b = a.getSelected(), c = "streets"; switch (b.title) { case "Imagery": c = "satellite"; break; case "Imagery with Labels": c = "hybrid"; break; case "Streets": c = "streets"; break; case "Topographic": c = "topo"; break; case "Dark Gray Canvas": c = "dark-gray"; break; case "Light Gray Canvas": c = "gray"; break; case "National Geographic": c = "national-geographic"; break; case "Oceans": c = "oceans"; break; case "Terrain with Labels": c = "terrain"; break; case "OpenStreetMap": c = "osm" } map.infoWindow.hide(), map.getLayer("glmeasure").clear(), deactivateToolbars("all"), isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "basemap|" + c), dijit.byId("dialogMobileBasemap").hide(), ufocus() }) } catch (a) { eh(a, "constructBasemap") } } function deactivateToolbars(a) { "measure" != a && "all" != a || (dojo.byId("mea_Point").src = "img/mea_Point.png", dojo.byId("mea_Polyline").src = "img/mea_Polyline.png", dojo.byId("mea_Polygon").src = "img/mea_Polygon.png", measuretoolbar && measuretoolbar.deactivate()), "draw" != a && "all" != a || (dojo.byId("draw_Arrow").src = "img/draw_Arrow.png", dojo.byId("draw_Circle").src = "img/draw_Circle.png", dojo.byId("draw_FreehandPolygon").src = "img/draw_FreehandPolygon.png", drawtoolbar && drawtoolbar.deactivate()), map.enableMapNavigation() } function enableNavigation() { map.infoWindow.hide(), map.getLayer("glmeasure").clear(), deactivateToolbars("all"), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "draw_clear|glmeasure") } function onDrawEnd_Measure(a) { try { var b = null, c = null, d = null; "point" === a.geometry.type || "multipoint" === a.geometry.type ? (map.getLayer("glmeasure").clear(), b = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE, 8, null, new dojo.Color([255, 0, 0, .75]))) : b = "line" === a.geometry.type || "polyline" === a.geometry.type ? new esri.symbol.CartographicLineSymbol(esri.symbol.CartographicLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 2, esri.symbol.CartographicLineSymbol.CAP_ROUND, esri.symbol.CartographicLineSymbol.JOIN_ROUND) : new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 2), new dojo.Color([255, 0, 0, .5])), "line" === a.geometry.type || "polyline" === a.geometry.type ? (c = new esri.tasks.LengthsParameters, c.polylines = [a.geometry], c.lengthUnit = esri.tasks.GeometryService.UNIT_FOOT, c.geodesic = !1, c.calculationType = "preserveShape", geometryService.lengths(c, function (c) { map.infoWindow.hide(), content = "Length: " + numberWithCommas(dojo.number.round(c.lengths[0], 2)) + " ft, " + numberWithCommas(dojo.number.round(c.lengths[0] / 5280, 2)) + " mi", map.getLayer("glmeasure").add(new esri.Graphic(a.geometry, b, { text: content }, new esri.InfoTemplate("Measurement Result", "${text}"))), popup.setContent(content), popup.setTitle("Measurement Result"), s = a.geometry.paths[0][a.geometry.paths.length - 1], pt = new esri.geometry.Point(s[0], s[1], map.spatialReference), popup.show(pt), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "measure|" + dojo.toJson(a.geometry.toJson()) + "|" + content + "|" + dojo.toJson(pt.toJson())) }, function (a) { eh(a, "lengths") })) : "polygon" === a.geometry.type ? (d = new esri.tasks.AreasAndLengthsParameters, d.linearUnit = esri.tasks.GeometryService.UNIT_FOOT, d.areaUnit = esri.tasks.GeometryService.UNIT_ACRES, d.calculationType = "preserveShape", geometryService.simplify([a.geometry], function (c) { d.polygons = c, geometryService.areasAndLengths(d, function (c) { map.infoWindow.hide(), content = "Acres: " + numberWithCommas(dojo.number.round(c.areas[0], 2)), map.getLayer("glmeasure").add(new esri.Graphic(a.geometry, b, { text: content }, new esri.InfoTemplate("Measurement Result", "${text}"))), popup.setContent(content), popup.setTitle("Measurement Result"), popup.show(a.geometry.getCentroid()), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "measure|" + dojo.toJson(a.geometry.toJson()) + "|" + content + "|" + dojo.toJson(a.geometry.getCentroid().toJson())) }, function (a) { eh(a, "areasAndLengths") }) })) : geometryService.project([a.geometry], new esri.SpatialReference(4326), function (c) { content = " Decimal Degrees: " + dojo.number.round(c[0].x, 4) + ", " + dojo.number.round(c[0].y, 4), content += " <br />Longitude: " + LocationFormatter.decimalToDMS(c[0].x, "X"), content += " <br />Lattitude: " + LocationFormatter.decimalToDMS(c[0].y, "Y"), map.infoWindow.hide(), popup.setContent(content), map.getLayer("glmeasure").add(new esri.Graphic(a.geometry, b, { text: content }, new esri.InfoTemplate("Measurement Result", "${text}"))), popup.setTitle("Measurement Result"), popup.show(a.geometry), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "measure|" + dojo.toJson(a.geometry.toJson()) + "|" + content + "|" + dojo.toJson(a.geometry.toJson())) }) } catch (a) { eh(a, "onDrawEnd_Measure") } } function toggleChildOnOff() { ufocus(), childWindow && (childWindow.window && childWindow.close(), childWindow = null); var a = dojo.byId("childOnOff").src; a.indexOf("img/child_on.png") > -1 ? (dojo.byId("childOnOff").src = "img/child_off.png", opts = "", hcl = "", ahcl = [], dojo.isChrome && (dojo.cookie("holdChildLocation_Chrome") ? (hcl = dojo.fromJson(dojo.cookie("holdChildLocation_Chrome")), ahcl = hcl.split("|"), opts = "top=" + ahcl[1] + ", left=" + ahcl[2] + ", width=" + ahcl[3] + ", height=" + ahcl[4] + ", titlebar=no, location=no, menubar=no, scrollbars=no, status=no, toolbar=no, resizable=yes") : opts = "top=0, left=0, width=1590, height=790, titlebar=no, location=no, menubar=no, scrollbars=no, status=no, toolbar=no, resizable=yes"), dojo.isIE && (dojo.cookie("holdChildLocation_IE") ? (hcl = dojo.fromJson(dojo.cookie("holdChildLocation_IE")), ahcl = hcl.split("|"), opts = "top=" + ahcl[1] + ", left=" + ahcl[2] + ", width=" + ahcl[3] + ", height=" + ahcl[4] + ", titlebar=no, location=no, menubar=no, scrollbars=no, status=no, toolbar=no, resizable=yes") : opts = "top=0, left=0, width=1590, height=790, titlebar=no, location=no, menubar=no, scrollbars=no, status=no, toolbar=no, resizable=yes"), dojo.isFF && (dojo.cookie("holdChildLocation_FF") ? (hcl = dojo.fromJson(dojo.cookie("holdChildLocation_FF")), ahcl = hcl.split("|"), opts = "top=" + ahcl[1] + ", left=" + ahcl[2] + ", width=" + ahcl[3] + ", height=" + ahcl[4] + ", titlebar=no, location=no, menubar=no, scrollbars=no, status=no, toolbar=no, resizable=yes") : opts = "top=0, left=0, width=1590, height=790, titlebar=no, location=no, menubar=no, scrollbars=no, status=no, toolbar=no, resizable=yes"), iext = "?idates=" + startDate + "|" + endDate + "&isector=" + dijit.byId("dttQuickZoom").get("displayedValue"), childWindow = window.open("index_child.htm" + iext, "child", "", !0)) : dojo.byId("childOnOff").src = "img/child_on.png" } function selectLocationType_onChange(a) { try { if (RemoveChildren(dojo.byId("locateList")), "" == a) return; showWorking("constructing searches ..."); var b = a.split("|"), c = null, d = ""; dijit.byId("dttQuickZoom").options[0].selected || dojo.forEach(dijit.byId("dttQuickZoom").getOptions(), function (a, b) { a.selected && (c = esri.geometry.fromJson(dojo.fromJson(a.value)), 0 != b && (d = a.label)) }); var e = []; e.push(createResultArray(b[0], b[1], b[2], d, c)); var f = new dojo.DeferredList(e); f.then(function (a) { dojo.forEach(a, function (a, c) { var d = dojo.create("table", { class: "tableLocations" }, null, "only"), e = dojo.create("tbody", null, d), f = ""; dojo.forEach(a[1].features, function (a, c) { var d = dojo.string.trim(a.attributes[b[1]]); if ("" != d && d != f) { var g = dojo.create("tr", null, e, "last"), h = dojo.create("td", { id: "list_" + c, innerHTML: d, class: "tdLocations" }, g, "last"); h.setAttribute("oid", c + ""), h.setAttribute("geo", dojo.toJson(a.geometry.toJson())), h.onclick = function () { showWorking(""); var a = dojo.query(".tdLocationsSelected"); dojo.forEach(a, function (a) { a.className = "tdLocations" }), dojo.byId("list_" + this.attributes.oid.value).className = "tdLocationsSelected", isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "hilite|" + this.attributes.geo.value); var b = esri.geometry.fromJson(dojo.fromJson(this.attributes.geo.value)); map.getLayer("glhilite").clear(), map.getLayer("glhilite").add(new esri.Graphic(b, new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_NULL, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 255, 0, .5]), 2), null))), map.setExtent(b.getExtent(), !0), hideWorking() }, f = d } }), dijit.byId("locateList").set("content", d) }), hideWorking() }) } catch (a) { eh(a, "selectLocationType_onChange") } } function constructSearches() { try { var a = dijit.byId("selectLocationType"); a && a.destroy(), opts = [{ value: "", label: '<label style="color: #FF0000">Select location type</label>' }], dojo.forEach(otherSearches, function (a) { opts.push({ value: a.layerIndex + "|" + a.queryField + "|" + a.filterField, label: a.displayName }) }); var b = new dijit.form.Select({ id: "selectLocationType", name: "selectLocationType", style: "width: 99%", options: opts, onChange: function (a) { selectLocationType_onChange(a) } }); dojo.byId("divLocateTop").appendChild(b.domNode), b.startup() } catch (a) { eh(a, "constructSearches") } } function createResultArray(a, b, c, d, e) { var f = new esri.tasks.QueryTask(overlayMapSevice + "/" + a), g = new esri.tasks.Query; return g.returnGeometry = !0, g.outSpatialReference = map.spatialReference, e && (g.geometry = e), g.outFields = [b], "" != c && "" != d ? g.where = b + " IS NOT NULL AND " + c + " = '" + d + "'" : g.where = b + " IS NOT NULL", g.orderByFields = [b + " ASC"], f.execute(g) } function closeChartPane() { dojo.byId("chartPaneMain").style.visibility = "hidden", isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "closechart|xxx") } function showChartPane() { dojo.byId("chartPaneMain").style.visibility = "visible" } function findByName(a, b) { for (var c = 0; c < a.length; c++) { source = a[c].eventServiceCrimeGroups; for (var d = 0; d < source.length; d++) if (source[d].label === b) return source[d] } throw "Couldn't find object with label: " + b } function findSummary(a, b, c) { return filteredArr = dojo.filter(a, function (a) { return a.label == b && a.layerIndex == c }), filteredArr[0] } function destroyChart() { RemoveChildren(dojo.byId("chartPane")), chart && (chart.destroy(), chart = null) } function chartSummary(a, b, c) {
    destroyChart(); var d = findByName(dataConfig, a), e = findSummary(d.summaries, b, c), f = trend([[1, e.wk3], [2, e.wk2], [3, e.wk1], [4, e.wk0]]); showChartPane(), dojo.byId("chartPaneLabel").innerHTML = "<label>" + a + '</label><img src="img/' + f + '.png" alt="' + f + '">', require(["dojox/charting/Chart", "dojox/charting/themes/Claro", "dojo/fx/easing", "dojox/charting/action2d/Tooltip", "dojox/charting/plot2d/Columns", "dojox/charting/plot2d/Lines", "dojox/charting/Chart2D"], function (a, c, d, f, g, h, i) {
        chart = new a("chartPane"), chart.setTheme(c), chart.addAxis("x", {
            title: e.avg < 1 ? b + " (" + e.avg + "/week)" : b + " (" + parseInt(e.avg) + "/week)", titleGap: 8, titleFont: isMain ? 'normal normal bold 10pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal bold 16pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif',
            titleFontColor: "orange", titleOrientation: "away", min: 0, max: 6, includeZero: !0, majorLabels: !0, minorTicks: !1, minorLabels: !1, microTicks: !1, rotation: -30, font: isMain ? 'normal normal bold 9pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal bold 16pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', fontColor: "yellow", labels: [{ value: 0, text: "" }, { value: 1, text: "WK" }, { value: 2, text: "WK1" }, { value: 3, text: "WK2" }, { value: 4, text: "WK3" }, { value: 5, text: "WKLY" }, { value: 6, text: "" }]
        }), chart.addAxis("y", { natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, font: isMain ? 'normal normal bold 9pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal bold 16pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }); var j = []; j.push({ x: 1, y: e.wk0, tooltip: e.wk0 + " events current week ", stroke: { color: "transparent" }, fill: { type: "linear", space: "plot", x1: 0, y1: 0, x2: 75, y2: 75, colors: [{ offset: 0, color: "white" }, { offset: 1, color: "#FFDF51" }] } }), j.push({ x: 2, y: e.wk1, tooltip: e.wk1 + " events previous week ", stroke: { color: "transparent" }, fill: { type: "linear", space: "plot", x1: 0, y1: 0, x2: 75, y2: 75, colors: [{ offset: 0, color: "white" }, { offset: 1, color: "#FF282F" }] } }), j.push({ x: 3, y: e.wk2, tooltip: e.wk2 + " events 2 weeks ago ", stroke: { color: "transparent" }, fill: { type: "linear", space: "plot", x1: 0, y1: 0, x2: 75, y2: 75, colors: [{ offset: 0, color: "white" }, { offset: 1, color: "#3AFF30" }] } }), j.push({ x: 4, y: e.wk3, tooltip: e.wk3 + " events 3 weeks ago ", stroke: { color: "transparent" }, fill: { type: "linear", space: "plot", x1: 0, y1: 0, x2: 75, y2: 75, colors: [{ offset: 0, color: "white" }, { offset: 1, color: "#3244FF" }] } }), j.push({ x: 5, y: e.wkly, tooltip: e.wkly + " events this week last year ", stroke: { color: "transparent" }, fill: { type: "linear", space: "plot", x1: 0, y1: 0, x2: 75, y2: 75, colors: [{ offset: 0, color: "white" }, { offset: 1, color: "#B200FF" }] } }); var k = [{ x: 0, y: e.avg }, { x: 1, y: e.avg }, { x: 2, y: e.avg }, { x: 3, y: e.avg }, { x: 4, y: e.avg }, { x: 4.5, y: e.avg }]; chart.addPlot("default", { type: "Lines", markers: !1, hAxis: "x", vAxis: "y", animate: { duration: 1e3, easing: d.linear } }), chart.addSeries("trendline", k, { stroke: { width: 6, color: "red" }, fill: "red" }), chart.addPlot("seriesa", { type: "Columns", gap: 1, labels: !0, labelStyle: "inside", fontColor: "black", precision: 0, font: isMain ? 'normal normal bold 9pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal bold 16pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', animate: { duration: 1e3, easing: d.linear } }), chart.addSeries("A", j, { plot: "seriesa" }), chart.movePlotToFront("default"), chart.theme.chart.fill = "#1E1E1E", chart.theme.chart.stroke = { color: "transparent", width: 1 }, chart.theme.plotarea.fill = "transparent", chart.theme.plotarea.stroke = "transparent", chart.theme.axis.stroke.color = "#FFFFFF", chart.theme.axis.tick.fontColor = "#FFFFFF", chart.theme.axis.tick.color = "#FFFFFF", new f(chart, "seriesa", { text: function (a) { return a.run.data[a.index].tooltip } }), chart.connectToPlot("seriesa", "onclick", function (a) { "onclick" == a.type && (ee = a) }), chart.render(), isMain ? chart.resize({ h: 260, w: 298 }) : chart.resize({ h: 420, w: 496 })
    })
} function trend(a) { for (var b = [0, 0, 0, 0, 0], c = 0; c < a.length; c++) null != a[c][1] && (b[0] += a[c][0], b[1] += a[c][1], b[2] += a[c][0] * a[c][0], b[3] += a[c][0] * a[c][1], b[4] += a[c][1] * a[c][1]); var d = (c * b[3] - b[0] * b[1]) / (c * b[2] - b[0] * b[0]); return d > 0 ? "UP" : d < 0 ? "DOWN" : "FLAT" } function clearTables() { try { gridOne && (gridOne.destroy(), gridOne = null) } catch (a) { eh(a, "clearTables") } } function createTable(a, b, c, d, e) { try { clearTables(); var f = findCrimeGroupFieldNames(a.name), g = findCrimeGroupDateFieldName(a.name), h = findCrimeGroup(a.name); if ("field" != h.processSummaryCounts.FieldOrOverlay && "ALL" != b) { var j = new esri.tasks.QueryTask(overlayMapSevice + "/" + d), i = new esri.tasks.Query; return i.returnGeometry = !0, i.outSpatialReference = a.spatialReference, i.where = e + " = '" + b + "'", j.execute(i, function (b) { var c = new esri.tasks.Query; c.returnGeometry = !1, c.outFields = f, c.geometry = b.features[0].geometry, c.where = "1=1", c.orderByFields = [g + " ASC"], c.spatialRelationship = esri.tasks.Query.SPATIAL_REL_CONTAINS, a.queryFeatures(c, function (b) { finishGrid(b.features, f, g, h, a) }, function (a) { eh(a, "createTable_queryFeatures") }) }) } var i = new esri.tasks.Query; i.returnGeometry = !1, i.outFields = f, i.where = "ALL" == b ? "1=1" : c + " = '" + b + "'", i.orderByFields = [g + " ASC"], a.queryFeatures(i, function (b) { finishGrid(b.features, f, g, h, a) }, function (a) { eh(a, "createTable_queryFeatures") }) } catch (a) { eh(a, "createTable") } } function finishGrid(a, b, c, d, e) { try { var f = dojo.map(a, function (a) { return a.attributes }); theStore = new dojo.data.ItemFileReadStore({ data: { items: f } }), theStore.comparatorMap = {}, theLayout = [], dateIndex = -1, dojo.forEach(b, function (a, b) { var d = getField(e, a); switch (a == c && (dateIndex = b), d.type) { case "esriFieldTypeSmallInteger": case "esriFieldTypeInteger": case "esriFieldTypeSingle": case "esriFieldTypeDouble": theLayout.push({ field: a, name: d.alias, datatype: "number", width: 10 * a.length + "px", styles: "text-align: right;", formatter: formatNumber, hidden: !1 }); break; case "esriFieldTypeDate": theLayout.push({ field: a, name: d.alias, datatype: "date", width: "130px", formatter: formatDate, hidden: !1 }); break; default: theLayout.push({ field: a, name: d.alias, datatype: "string", width: 10 * d.length + "px", formatter: formatString, hidden: !1 }) } }); var g = [{ defaultCell: {}, cells: theLayout }]; theStore.comparatorMap.BCS_DOW = function (a, b) { var c = { Sunday: 1, Monday: 2, Tuesday: 3, Wednesday: 4, Thursday: 5, Friday: 6, Saturday: 7 }; return c[a] > c[b] ? 1 : -1 }, gridOne = new dojox.grid.EnhancedGrid({ id: "tableOne", selectionMode: "single", rowSelector: "1px", structure: g, store: null, plugins: { nestedSorting: !0, indirectSelection: !1 }, loadingMessage: "Getting data from server..", errorMessage: "Oops we could not retrive the requested data!", onFetchError: function (a, b) { return console.log("Error ocured: " + a + " ioargs: " + b), !0 }, onStyleRow: function (a) { if ("" != d.eventServiceOpenCloseField.name) { statusfield = d.eventServiceOpenCloseField.name; var b = gridOne.getItem(a.index); b && (itemValue = b[statusfield], d.eventServiceOpenCloseField.open.indexOf(itemValue[0]) > -1 ? a.customStyles += "color: #005108; font-weight: bold;" : d.eventServiceOpenCloseField.closed.indexOf(itemValue[0]) > -1 ? a.customStyles += "color: #AF0000; font-weight: bold;" : a.customStyles += "color: black; font-weight: bold;"), gridOne.focus.styleRow(a), gridOne.edit.styleRow(a) } } }), dijit.byId("dialogTable").set("title", e.name + " (" + a.length + ")"), dijit.byId("dialogTable").show(), dojo.byId("divTableBody").appendChild(gridOne.domNode), gridOne.startup(), gridOne.setStore(theStore), gridOne.setSortIndex(dateIndex, !0) } catch (a) { eh(a, "finishGrid") } } function findCrimeGroup(a) { return agrp = null, dojo.forEach(dataConfig, function (b) { dojo.forEach(b.eventServiceCrimeGroups, function (c) { c.label === a && (agrp = b) }) }), agrp } function findCrimeGroupDateFieldName(a) { return field = "", dojo.forEach(dataConfig, function (b) { dojo.forEach(b.eventServiceCrimeGroups, function (b) { b.label === a && (field = b.dateFieldName) }) }), field } function findCrimeGroupFieldNames(a) { return fields = "", dojo.forEach(dataConfig, function (b) { dojo.forEach(b.eventServiceCrimeGroups, function (b) { b.label === a && (fields = b.tableFields) }) }), fields.split(",") } function getField(a, b) { return filteredArr = dojo.filter(a.fields, function (a) { return a.name == b }), filteredArr[0] } function formatNumber(a) { return null == a || "null" == a || "" == a ? '<font color="#C0C0C0"><em>0</em></font>' : a } function formatString(a) { return null == a || "null" == a || "" == a ? "null" : a } function formatDate(a) { if (null == a || "null" == a || "" == a) return "null"; var b = new Date(a); return dojo.date.locale.format(dojo.date.add(b, "minute", b.getTimezoneOffset()), { selector: "date", datePattern: "yyyy-MM-dd HH:mm:ss" }) } function createNewTOC() { try { var a = [], b = map.getLayer("overlayMapServiceLayer"); a.push(createLayerTOC(b)); var c = new dojo.DeferredList(a); c.then(function (a) { var c = dojo.create("table", { style: "letter-spacing: normal" }, null, "only"), d = dojo.create("tbody", null, c); dojo.forEach(a, function (a) { var c = a[1].layers; dojo.forEach(c, function (a) { if (1 == a.legend.length) { row = dojo.create("tr", { id: b.id + "-" + a.layerId + "-TocItem" }, d, "last"), td0 = dojo.create("td", { innerHTML: "<img src='img/blank.png'>" }, row, "last"), td = dojo.create("td", { class: "checkCell2" }, row, "last"), div = dojo.create("div", null, td), id = b.id + "-" + a.layerId + "-CHK", chkd = b.visibleLayers.indexOf(a.layerId) > -1; try { var c = new dijit.form.CheckBox({ id: id, checked: chkd, title: "Visible in Map", style: "margin: 4px 0px 0px 0px;" }, div) } catch (a) { eh(a, "createNewTOC") } c.set("class", b.id), dojo.connect(c, "onClick", toggleRefrenceMapServiceLayer); var e = b.url + "/" + a.layerId + "/images/" + a.legend[0].url; dojo.create("td", { innerHTML: '<div class="tocItem"><img style="vertical-align:middle;" src=\'' + e + "'/>&nbsp;<label for='" + id + "'>" + a.layerName + "</label></div>", style: "cursor: pointer" }, row, "last") } else { row = dojo.create("tr", null, d, "last"), td0in = "<img id='" + b.id + "-" + a.layerId + "-Icon' src='img/expand.png' onclick=\"toggleLayer('" + b.id + "-" + a.layerId + "')\" >", td0 = dojo.create("td", { innerHTML: td0in, class: "expandCell" }, row, "last"), td = dojo.create("td", { class: "checkCell2" }, row, "last"), div = dojo.create("div", null, td), id = b.id + "-" + a.layerId + "-CHK", chkd = b.visibleLayers.indexOf(a.layerId) > -1; var c = new dijit.form.CheckBox({ id: id, checked: chkd, title: "Visible in Map", style: "margin: 4px 0px 0px 0px;" }, div); c.set("class", b.id), dojo.connect(c, "onClick", toggleRefrenceMapServiceLayer), td2 = dojo.create("td", { innerHTML: '&nbsp;<label class="tocItem" for=\'' + id + "'>" + a.layerName + "</label>", style: "cursor: pointer" }, row, "last"), tl = a.legend.length, row = dojo.create("tr", { id: b.id + "-" + a.layerId + "-TocItem", style: "display: none;" }, d, "last"), currentHTML = "<div id='" + a.layerId + "-Layers'>", dojo.forEach(a.legend, function (c, d) { var e = b.url + "/" + a.layerId + "/images/" + c.url; currentHTML += '<img style="vertical-align:middle;" src=\'' + e + '\'/>&nbsp;<label class="tocItem">' + c.label + "</label><br />" }), dojo.create("td", { innerHTML: "<img src='img/blank.png'>" }, row, "last"), dojo.create("td", { innerHTML: "<img src='img/blank.png'>" }, row, "last"), dojo.create("td", { innerHTML: currentHTML + "</div>" }, row, "last") } }) }), dijit.byId("tocAccordion").addChild(new dijit.layout.AccordionPane({ title: "Overlay Layers", content: c })) }) } catch (a) { eh(a, "createNewTOC") } } function createLayerTOC(a) { return esri.request({ url: a.url + "/legend", useProxy: !0, disableIdentityLookup: !0, content: { f: "json" }, handleAs: "json", preventCache: !0, callbackParamName: "callback", load: function (a, b) { }, error: function (a, b) { log("An error occured, please refresh your browser.") } }) } function toggleLayer(a) { try { var b = dojo.byId(a + "-TocItem"), c = dojo.byId(a + "-Icon"); "table-row" == b.style.display ? (c.src = "img/expand.png", b.style.display = "none") : (c.src = "img/close.png", b.style.display = "table-row") } catch (a) { eh(a, "toggleLayer") } } function toggleRefrenceMapServiceLayer(a) { var b = a.target.id.split("-")[0], c = dojo.query("." + b + " >"), d = []; if (dojo.forEach(c, function (a) { a.checked && d.push(parseInt(a.id.split("-")[1])) }), d.length > 0) try { isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "vislyr|overlayMapServiceLayer|" + dojo.toJson(d)) } finally { map.infoWindow.hide(), map.getLayer(b).setVisibleLayers(d) } } function buildWeekWidget(a) { buildDateStringLabel(); var b = []; b.push({ value: [convertUTCToDate(startDate), convertUTCToDate(endDate)], label: "Current Week", selected: !0 }), s = new Date(startDate), s.setDate(s.getDate() - a.reportDays), e = new Date(endDate), e.setDate(e.getDate() - a.reportDays), b.push({ value: [convertUTCToDate(s), convertUTCToDate(e)], label: "Previous Week", selected: !1 }), s1 = new Date(s), s1.setDate(s1.getDate() - a.reportDays), e1 = new Date(e), e1.setDate(e1.getDate() - a.reportDays), b.push({ value: [convertUTCToDate(s1), convertUTCToDate(e1)], label: "2 Weeks Ago", selected: !1 }), s2 = new Date(s1), s2.setDate(s2.getDate() - a.reportDays), e2 = new Date(e1), e2.setDate(e2.getDate() - a.reportDays), b.push({ value: [convertUTCToDate(s2), convertUTCToDate(e2)], label: "3 Weeks Ago", selected: !1 }), b.push({ value: [convertUTCToDate(s2), convertUTCToDate(endDate)], label: "Cumulative (All 4 Weeks)", selected: !1 }), dijit.byId("dttWeek") && dijit.byId("dttWeek").destroy(), sel = new dijit.form.Select({ id: "dttWeek", name: "dttWeek", maxHeight: 200, options: b, value: b[0].value, onChange: dttWeek_OnChange }), dojo.byId("tdWeek").appendChild(sel.domNode), sel.startup(), dojo.forEach(dataConfig, function (a) { a.eventServiceOpenCloseField.open = a.eventServiceOpenCloseField.open.split(","), a.eventServiceOpenCloseField.closed = a.eventServiceOpenCloseField.closed.split(","), a.eventServiceOpenCloseField.unknown = a.eventServiceOpenCloseField.unknown.split(","), dojo.forEach(a.eventServiceCrimeGroups, function (a) { a.codeTable = window[a.codeTable], a.codes = a.codes.split(","), a.infotemp = a.infotemp.replace(/\|/g, "<br />") }) }) } function dttWeek_OnChange(a) { startDate = new Date(a[0]), endDate = new Date(a[1]), dojo.forEach(eventsTypes, function (a) { var b = buildDateString(a.dateField, a.dbType); map.getLayer(a.id).setDefinitionExpression(b) }), startMonth = startDate.getMonth() + 1 < 10 ? "0" + (startDate.getMonth() + 1) : startDate.getMonth() + 1, startDay = startDate.getDate() < 10 ? "0" + startDate.getDate() : startDate.getDate(), endMonth = endDate.getMonth() + 1 < 10 ? "0" + (endDate.getMonth() + 1) : endDate.getMonth() + 1, endDay = endDate.getDate() < 10 ? "0" + endDate.getDate() : endDate.getDate(), buildDateStringLabel(), isMain && childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "datechange|" + dojo.toJson(a[0]) + "|" + dojo.toJson(a[1])) } function buildDateStringLabel() { try { sformat = dojo.date.locale.format(startDate, { selector: "date", datePattern: "MM-dd" }), eformat = dojo.date.locale.format(endDate, { selector: "date", datePattern: "MM-dd" }), dojo.byId("lblDateRange").innerHTML = sformat + " to " + eformat } catch (a) { eh(a, "buildDateString"), dojo.byId("lblDateRange").innerHTML = "" } } function ufocus() { require(["dijit/focus"], function (a) { a.curNode && a.curNode.blur() }) } function numberWithCommas(a) { return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") } function RemoveChildren(a) { if (a) for (; a.hasChildNodes() ;) a.removeChild(a.lastChild) } function convertUTCToDate(a) { return "" == a || null == a ? null : dojo.date.locale.format(new Date(a), { selector: "date", datePattern: "MM/dd/yyyy" }) } function formatDateIW(a, b, c) { var d = a instanceof Array ? a[0] : a; if (null == d || "null" == d || "" == d) return '<font color="#C0C0C0"><em>null</em></font>'; var e = new Date(d); return dojo.date.locale.format(dojo.date.add(e, "minute", e.getTimezoneOffset()), { selector: "date", datePattern: "yyyy-MM-dd" }) } function hexToRgb(a) { if (/^#([0-9a-f]{3}|[0-9a-f]{6})$/gi.test(a)) { var b = a.substr(1); b = 3 == b.length ? b.replace(/(.)/g, "$1$1") : b; var c = parseInt(b, 16); return [c >> 16 & 255, c >> 8 & 255, 255 & c] } } function clsType() { this.id = "", this.Label = "", this.InfoWinTemp = "", this.FeatureLayer = null, this.extraQuery = "", this.codes = "", this.dbType = "", this.dateField = "", this.codeField = "", this.summaries = null } function saveClass(a) { var b = null; return b = new clsType, b.id = a.id, b.Label = a.Label, b.InfoWinTemp = a.InfoWinTemp, b.FeatureLayer = a.FeatureLayer, b.extraQuery = a.extraQuery, b.codes = a.codes, b.dbType = a.dbType, b.dateField = a.dateField, b.codeField = a.codeField, b.summaries = null, b } function loadTypes() { updateWorking("loading event types"); try { var a = new dojo.Deferred; if (isMain) var b = new dijit.layout.AccordionContainer({ id: "tocAccordion", style: "height: 100%" }); return dojo.forEach(dataConfig, function (a, c) { if (isMain) var d = dojo.create("table", { style: "letter-spacing: normal" }, null, "only"), e = dojo.create("tbody", null, d); dojo.forEach(a.eventServiceCrimeGroups, function (b, d) { var f = buildDateString(b.dateFieldName, a.eventService_dbType), g = new esri.symbol.PictureMarkerSymbol(b.renderer.imagePath + b.renderer.defaultSymbol, b.renderer.w, b.renderer.h); if ("SIMPLE" == b.renderer.type) var h = new esri.renderer.SimpleRenderer(g); else { if ("" != a.eventServiceOpenCloseField.name) var h = new esri.renderer.UniqueValueRenderer(g, b.codeFieldName, a.eventServiceOpenCloseField.name, null, "|"); else var h = new esri.renderer.UniqueValueRenderer(g, b.codeFieldName); dojo.forEach(b.codeTable, function (c) { b.codes.indexOf(c.code) > -1 && ("" != a.eventServiceOpenCloseField.name ? (dojo.forEach(a.eventServiceOpenCloseField.open, function (a) { h.addValue(c.code + "|" + a, new esri.symbol.PictureMarkerSymbol(b.renderer.imagePath + b.label + "_Open.png", b.iconSize.w, b.iconSize.h)) }), dojo.forEach(a.eventServiceOpenCloseField.closed, function (a) { h.addValue(c.code + "|" + a, new esri.symbol.PictureMarkerSymbol(b.renderer.imagePath + b.label + "_Closed.png", b.iconSize.w, b.iconSize.h)) }), dojo.forEach(a.eventServiceOpenCloseField.unknown, function (a) { h.addValue(c.code + "|" + a, new esri.symbol.PictureMarkerSymbol(b.renderer.imagePath + b.label + ".png", b.renderer.w, b.renderer.h)) })) : h.addValue(c.code, new esri.symbol.PictureMarkerSymbol(b.renderer.imagePath + b.label + ".png", b.iconSize.w, b.iconSize.h))) }) } var i = f; "" != b.extraQuery && (i += " AND " + b.extraQuery); var j = new esri.layers.FeatureLayer(a.eventService + b.index, { id: "eventLayer_" + c + "_" + d, outFields: ["*"], infoTemplate: new esri.InfoTemplate("Information", b.infotemp), visible: !1, mode: esri.layers.FeatureLayer.MODE_ONDEMAND }), k = { id: "eventLayer_" + c + "_" + d, Label: b.label, FeatureLayer: j, InfoWinTemp: b.infotemp, extraQuery: b.extraQuery, codes: b.codes, dbType: a.eventService_dbType, dateField: b.dateFieldName, codeField: b.codeFieldName }, l = saveClass(k); if (eventsTypes.push(l), j.setRenderer(h), j.setDefinitionExpression(i), j.on("update-start", function () { log(b.label + " update started"), showWorking2() }), j.on("update-end", function (a) { log(b.label + " update ended"), hideWorking2() }), layersToAdd.push(j), isMain) { r = dojo.create("tr", null, e, "last"), td = dojo.create("td", { style: "padding-bottom: 5px" }, r, "last"); var m = dojo.create("div", null, td); new dijit.form.CheckBox({ id: j.id + "_CHK", checked: !1, style: "margin: 2px 0px 0px 0px;", class: "ToggleControl", onChange: function (a) { childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "visbase|" + j.id + "|" + a), map.infoWindow.hide(), map.getLayer(j.id).setVisibility(a), a && checkAllEventLayers(), a || dojo.byId("chartPaneLabel").innerHTML == map.getLayer(j.id).name && (closeChartPane(), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "closechart|" + j.id + "|" + a)) } }, m); b.summaries.length > 0 && (td = dojo.create("td", { innerHTML: "<img src='img/columns.png' style='width: 16px; height: 16px' alt='chart' />", title: j.id, style: "cursor: pointer" }, r, "last"), td.onclick = function () { dijit.byId(this.title + "_CHK").get("checked") && (map.infoWindow.hide(), opts = dijit.byId("dttQuickZoom").get("value").split("_"), qk = quickZoomLayer[parseInt(opts[0])], "ALL" != opts[1] ? (chartSummary(map.getLayer(this.title).name, qk.geos[parseInt(opts[1]) + 1].name, qk.layerIndex), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "createchart|" + map.getLayer(this.title).name + "|" + qk.geos[parseInt(opts[1]) + 1].name + "|" + qk.layerIndex)) : (chartSummary(map.getLayer(this.title).name, qk.geos[0].name, qk.layerIndex), childWindow && childWindow.window && childWindow.$(childWindow.document).trigger("childWindow", "createchart|" + map.getLayer(this.title).name + "|" + qk.geos[0].name + "|" + qk.layerIndex))) }, td = dojo.create("td", { innerHTML: "<img src='img/table.png' style='width: 16px; height: 16px' alt='table' />", title: j.id, style: "cursor: pointer" }, r, "last"), td.onclick = function () { dijit.byId(this.title + "_CHK").get("checked") && (opts = dijit.byId("dttQuickZoom").get("value").split("_"), qk = quickZoomLayer[parseInt(opts[0])], "ALL" != opts[1] ? (lbls = dijit.byId("dttQuickZoom").get("displayedValue").split(":"), createTable(map.getLayer(this.title), dojo.trim(lbls[1]), qk.eventFieldName, qk.layerIndex, qk.queryField)) : createTable(map.getLayer(this.title), "ALL", qk.eventFieldName, qk.layerIndex, qk.queryField)) }), td = dojo.create("td", { innerHTML: "<img src='" + b.renderer.imagePath + b.renderer.defaultSymbol + "' style='width: 18px; height: 18px' alt='table' />", title: j.id, style: "cursor: pointer" }, r, "last"), td.onclick = function () { dijit.byId(this.title + "_CHK").set("checked", !dijit.byId(this.title + "_CHK").checked) }, b.summaries.length > 0 && 0 == b.currentCount ? clr = "#808080" : clr = "#000000", td = dojo.create("td", { innerHTML: "<label style='color: " + clr + "; cursor: pointer'>" + b.label + "</label>", title: j.id, style: "cursor: pointer" }, r, "last"), td.onclick = function () { dijit.byId(this.title + "_CHK").set("checked", !dijit.byId(this.title + "_CHK").checked) } } }), isMain && b.addChild(new dijit.layout.AccordionPane({ title: a.eventTitle, content: d, onFocus: function () { ufocus() } })) }), isMain && (dijit.byId("divAccordion").addChild(b), dijit.byId("divAccordion").resize()), a.resolve("loadTypes OK"), a } catch (b) { return eh(b, "loadTypes"), a.resolve("loadTypes NOT OK"), a } } function toggleExpand(a) { try { var b = dojo.byId(a + "_TREXPAND"), c = dojo.byId(a + "_EXPAND"); c.src = "table-row" == b.style.display ? "img/expand.png" : "img/close.png", b.style.display = "table-row" == b.style.display ? "none" : "table-row" } catch (a) { eh(a, "toggleLayer") } } function checkAllEventLayers() { var a = !1; dojo.forEach(dojo.query(".ToggleControl >"), function (b) { b.checked && (a || (a = !0)) }), dojo.byId("imgOnOff").src = a ? "img/off.png" : "img/on.png" } function toggleAllEventLayersOff() { ufocus(); var a = ""; dojo.forEach(dojo.query(".ToggleControl >"), function (b) { b.checked && (ary = b.id.split("_"), map.getLayer(ary[0] + "_" + ary[1] + "_" + ary[2]).setVisibility(!1), dijit.byId(b.id).set("checked", !1), "" == a ? a = ary[0] + "_" + ary[1] + "_" + ary[2] : a += "," + ary[0] + "_" + ary[1] + "_" + ary[2]) }), dojo.byId("imgOnOff").src = "img/on.png", childWindow && childWindow.window && "" != a && childWindow.$(childWindow.document).trigger("childWindow", "allLayersOff|" + a) } function buildCodeString(a, b) { try { return inlist = "", dojo.forEach(b, function (a) { inlist += "" == inlist ? "'" + a + "'" : ",'" + a + "'" }), a + " IN (" + inlist + ")" } catch (a) { return eh(a, "buildCodeString"), "" } } function buildDateString(a, b) { try { switch (startMonth = startDate.getMonth() + 1 < 10 ? "0" + (startDate.getMonth() + 1) : startDate.getMonth() + 1, startDay = startDate.getDate() < 10 ? "0" + startDate.getDate() : startDate.getDate(), endMonth = endDate.getMonth() + 1 < 10 ? "0" + (endDate.getMonth() + 1) : endDate.getMonth() + 1, endDay = endDate.getDate() < 10 ? "0" + endDate.getDate() : endDate.getDate(), generalstring = "", b) { case "CAT_EXPORT": generalstring = "BCS_YMD >= " + startDate.getFullYear() + startMonth + startDay + " AND BCS_YMD <= " + endDate.getFullYear() + endMonth + endDay; break; case "MSSQL": generalstring = a + " >= date '" + startDate.getFullYear() + "-" + startMonth + "-" + startDay + "' AND " + a + " <= date '" + endDate.getFullYear() + "-" + endMonth + "-" + endDay + "'"; break; case "ORACLE": generalstring = a + " >= TO_DATE('" + startDate.getFullYear() + "-" + startMonth + "-" + startDay + "','YYYY-MM-DD') AND " + a + " <= TO_DATE('" + endDate.getFullYear() + "-" + endMonth + "-" + endDay + "','YYYY-MM-DD')"; break; case "FILE": generalstring = a + " >= DATE '" + startDate.getFullYear() + "-" + startMonth + "-" + startDay + "' AND " + a + " <= DATE '" + endDate.getFullYear() + "-" + endMonth + "-" + endDay + "'" } return "(" + generalstring + ")" } catch (a) { return eh(a, "buildDateString"), "" } } LocationFormatter.NORTH = "N", LocationFormatter.SOUTH = "S", LocationFormatter.EAST = "E", LocationFormatter.WEST = "W", LocationFormatter.roundToDecimal = function (a, b) { var c = Math.pow(10, b); return Math.round(a * c) / c }, LocationFormatter.decimalToDMS = function (a, b) { a < 0 && (a *= -1); var c = Math.floor(a), d = 60 * (a - c), e = Math.floor(d), f = 60 * (d - e), g = dojo.number.round(f, 0), h = "X" == b ? a < 0 ? LocationFormatter.EAST : LocationFormatter.WEST : a < 0 ? LocationFormatter.SOUTH : LocationFormatter.NORTH; return c + "° " + e + "' " + g + '" ' + h }, LocationFormatter.decimalLatToDMS = function (a) { var b = a < 0 ? LocationFormatter.SOUTH : LocationFormatter.NORTH; return LocationFormatter.decimalToDMS(a, b) }, LocationFormatter.decimalLongToDMS = function (a) { var b = a < 0 ? LocationFormatter.EAST : LocationFormatter.WEST; return LocationFormatter.decimalToDMS(a, b) }, LocationFormatter.DMSToDecimal = function (a, b, c, d) { var e = a + b / 60 + c / 3600; return e = d == LocationFormatter.SOUTH || d == LocationFormatter.WEST ? e * -1 : e, LocationFormatter.roundToDecimal(e, 5) }, require(["dojo/parser", "dojo/_base/event", "dojo/ready", "esri/urlUtils", "esri/tasks/locator", "esri/map", "esri/dijit/HomeButton", "esri/layers/FeatureLayer", "esri/tasks/query", "esri/layers/LabelLayer", "esri/dijit/Popup", "esri/layers/LabelClass", "esri/symbols/TextSymbol", "esri/renderers/UniqueValueRenderer", "esri/renderers/SimpleRenderer", "esri/layers/StreamLayer", "esri/layers/TimeInfo", "esri/layers/CSVLayer", "esri/dijit/OverviewMap", "esri/tasks/QueryTask", "esri/layers/osm", "esri/dijit/BasemapGallery", "esri/tasks/geometry", "esri/toolbars/navigation", "esri/tasks/AreasAndLengthsParameters", "dojo/promise/all", "dojo/DeferredList", "dojo/Deferred", "dojo/dom", "dojo/date/locale", "dojo/_base/json", "dijit/registry", "dijit/popup", "dijit/Dialog", "dijit/Tooltip", "dijit/TooltipDialog", "dijit/form/FilteringSelect", "dijit/form/ToggleButton", "dijit/form/Button", "dijit/form/DropDownButton", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/layout/AccordionContainer", "dijit/layout/AccordionPane", "dojox/layout/FloatingPane", "dijit/Toolbar", "dijit/layout/TabContainer", "dijit/layout/LayoutContainer", "dijit/form/TextBox", "dijit/form/ComboBox", "dijit/form/CheckBox", "dijit/form/Select", "dijit/form/MultiSelect", "dijit/form/Textarea", "dijit/form/DateTextBox", "dojo/cookie", "dojo/data/ItemFileReadStore", "dojox/layout/ScrollPane", "dojox/lang/functional", "dojox/lang/functional/lambda", "dojox/lang/functional/curry", "dojox/lang/functional/fold", "dojox/grid/DataGrid", "dojo/data/ItemFileReadStore", "dojox/grid/EnhancedGrid", "dojo/data/ItemFileWriteStore", "dijit/form/HorizontalSlider", "dojox/grid/enhanced/plugins/IndirectSelection", "dojox/grid/enhanced/plugins/NestedSorting", "dojox/grid/enhanced/plugins/DnD", "dijit/ProgressBar", "dojox/layout/GridContainerLite", "dijit/TitlePane"], function (a, b, c) { c(function () { return a.parse(), dojo.isIE < 9 ? void (window.location = "ie8.htm") : (isMain = !0, isMobile = { Android: function () { return navigator.userAgent.match(/Android/i) }, BlackBerry: function () { return navigator.userAgent.match(/BlackBerry/i) }, iOS: function () { return navigator.userAgent.match(/iPhone|iPad|iPod/i) }, Opera: function () { return navigator.userAgent.match(/Opera Mini/i) }, Windows: function () { return navigator.userAgent.match(/IEMobile/i) }, any: function () { return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows() } }, isMobile.any() && (log("This is a Mobile Device"), dojo.byId("trShowChildWindow").style.display = "none", dojo.byId("trCloseChildWindow").style.display = "none"), showWorking(""), dijit.byId("dialogTable").hide(), closeChartPane(), startApp(), void 0) }) }); var chart = null, gridOne = null, theStore = null, theLayout = [], eventsTypes = [];