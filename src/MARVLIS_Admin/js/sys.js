function buildHistogram(a) { val = dijit.byId("chartHistogram_" + a).get("value"), "BAR_DAY" == val || "LINE_DAY" == val ? buildLastDays(a) : build52Weeks(a) } function get52WeekConfig(a) { return filteredArr = dojo.filter(dataConfig[0].groups, function (b) { return b.title == a }), rtn = dojo.filter(filteredArr[0].events, function (a) { return "chartLast52Weeks" == a.parent }), rtn[0] } function get52WeekDateField(a) { return filteredArr = dojo.filter(dataConfig[0].groups, function (b) { return b.title == a }), filteredArr[0].dateFieldName } function get52WeekTrend(a) { return filteredArr = dojo.filter(dataConfig[0].groups, function (b) { return b.title == a }), filteredArr[0].trendUpSign } function build52Weeks(a) { showLW("divWorking_Week"); try { wk_evnt = get52WeekConfig(crime_part), wk_trend = get52WeekTrend(crime_part), RemoveChildren(dojo.byId(a)), linesColumns && linesColumns.node.id == a && (linesColumns.destroy(), linesColumns = null), dojo.byId("lbl" + a).innerHTML = crime_code_category_abbr + " 52 wks  (" + crime_geolayer_filter_district + ")"; esri.request({ url: adminSOE + "getHistogram", handleAs: "json", content: { title: "52 weeks", dayorweek: "WEEK", code: crime_code_category === crime_part ? "ALL" : crime_code_category, group: crime_part, zonefield: crime_geolayer_filter_field, zone: crime_geolayer_filter_district, shift: crime_shift, f: "json" }, callbackParamName: "callback", load: function (b, c) { daytime = new Array(24); for (var d = 0; d < 24; d++) { daytime[d] = new Array(7); for (var e = 0; e < 7; e++) daytime[d][e] = 0 } dojo.forEach(b.hours, function (a) { daytime[a.h][a.d] = a.count }), finish52Weeks2(wk_evnt, a, b.items, wk_trend) }, error: function (a, b) { eh(a, "getHistogram") } }) } catch (a) { eh(a, "build52Weeks"), hideLW("divWorking_Week") } } function finish52Weeks2(a, b, c, d) { try { var e = 0; dojo.forEach(c, function (a) { e += a.y }); var f = e / 52, h = [], i = [], j = [], k = 0, l = dojox.charting.Theme.generateGradient; chartColor = crime_code_category ? findCategoryColor(crime_part, crime_code_category, dataConfig[0]) : "#0000FF", dojo.forEach(c, function (a) { a.fill = a.y > f ? "#E10000" : "#007F0E", h.push({ value: a.x, text: a.m }), j.push({ y: parseInt(f), tooltip: "52 week event average: " + parseInt(f) }), a.y > k && (k = a.y), i.push([a.x, a.y]) }); var m = regression(trendType.name, i, trendType.order); trnd = m.series; var n = regression("linear", i, 0), o = "UP_NEGATIVE", q = "#E10000", r = "#007F0E"; switch (n.trendDirection) { case "UP": "POSITIVE" === d ? (o = "UP_POSITIVE", q = "#007F0E", r = "#E10000") : (o = "UP_NEGATIVE", q = "#E10000", r = "#007F0E"); break; default: "POSITIVE" === d ? (o = "DOWN_NEGATIVE", q = "#007F0E", r = "#E10000") : (o = "DOWN_POSITIVE", q = "#E10000", r = "#007F0E") } dojo.byId("imgTrend").src = "img/" + o + ".png", maxYAxis = k < 100 ? k + 5 : k + 15, require(["dojo/fx/easing"], function (a) { switch (avgLbl = f < 10 ? f.toFixed(2) : parseInt(f), linesColumns = new dojox.charting.Chart(b, { title: "Avg: " + avgLbl + " per week", titlePos: "bottom", titleGap: 8, titleFont: 'normal normal normal 10pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', titleFontColor: "#FFE100" }), linesColumns.setTheme(dojox.charting.themes.Claro), linesColumns.addPlot("Grid", { type: "Grid", hAxis: "x", vAxis: "y", hMajorLines: !0, hMinorLines: !1, vMajorLines: !0, vMinorLines: !1 }), linesColumns.addPlot("default", { type: "Lines", markers: !1, hAxis: "other x", vAxis: "other y", shadow: { dx: 1, dy: 1, width: 2, color: [0, 0, 0, .3] }, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("trendline", trnd, { stroke: { width: 3, color: "white" } }), linesColumns.addSeries("averageline", j, { stroke: { width: 3, color: "#FFE100", style: "Dot" } }), dijit.byId("chartHistogram_" + b).get("value")) { case "BAR_WEEK": linesColumns.addPlot("wk_seriesA", { type: "Columns", hAxis: "x", vAxis: "y", gap: 0, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("A", c, { plot: "wk_seriesA", stroke: { width: 0, color: chartColor } }); break; case "LINE_WEEK": linesColumns.addPlot("wk_seriesA", { type: "Lines", hAxis: "x", vAxis: "y", markers: !0, tension: "S", animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("A", c, { plot: "wk_seriesA", stroke: { width: 2, color: chartColor }, fill: "transparent" }), new dojox.charting.action2d.Magnify(linesColumns, "wk_seriesA"); break; case "AREA_WEEK": linesColumns.addPlot("wk_seriesA", { type: "Areas", hAxis: "x", vAxis: "y", tension: "S", animate: { duration: 1e3, easing: a.linear } }), defaultFill = { type: "linear", space: "shape", x1: 0, y1: 0, x2: 0, y2: 400 }, linesColumns.addSeries("A", c, { plot: "wk_seriesA", fill: l(defaultFill, ColorLuminance(chartColor, -.9), chartColor), stroke: { color: "transparent" } }) } linesColumns.addAxis("y", { min: 0, max: maxYAxis, natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("x", { labels: h, includeZero: !1, minorTicks: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("other x", { labels: h, includeZero: !1, minorTicks: !1, leftBottom: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("other y", { min: 0, max: maxYAxis, natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, leftBottom: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.theme.chart.fill = "#1E1E1E", linesColumns.theme.chart.stroke = { color: "transparent" }, linesColumns.theme.marker.outline.color = "transparent", linesColumns.theme.marker.stroke.color = "transparent", linesColumns.theme.plotarea.fill = "#1E1E1E", linesColumns.theme.plotarea.stroke = "#1E1E1E", linesColumns.theme.axis.stroke.color = "#FFFFFF", linesColumns.theme.axis.tick.fontColor = "#FFFFFF", linesColumns.theme.axis.tick.color = "#FFFFFF", new dojox.charting.action2d.Highlight(linesColumns, "wk_seriesA", { duration: 1e3, easing: dojo.fx.easing.sineOut, highlight: "black" }), new dojox.charting.action2d.Tooltip(linesColumns, "wk_seriesA", { text: function (a) { return numberWithCommas(a.run.data[a.index].y) + " events in week of " + a.run.data[a.index].hint } }), linesColumns.render() }), "MainHistogram" == b && selectHeatChart_onChange(dijit.byId("selectHeatChart_MainHeatTable").get("value")) } catch (a) { eh(a, "finish52Weeks") } finally { hideLW("divWorking_Week"), p = dojo.byId(b), linesColumns.resize(p.clientWidth, p.clientHeight) } } function finish52Weeks(a, b, c, d, e, f, g) { try { for (var h = new Array(53), i = 0; i < 54; i++) h[i] = []; daytime = new Array(24); for (var j = new Array(24), i = 0; i < 24; i++) { daytime[i] = new Array(7), j[i] = 0; for (var k = 0; k < 7; k++) daytime[i][k] = 0 } currentWeek = (new Date).getWeek(), dojo.forEach(b, function (a) { woy = parseInt(a.attributes[d]), 53 == woy ? h[1].push(a) : h[woy].push(a), day = new Date(a.attributes[c]).getDay(), hour = a.attributes[e], daytime[hour][day] += 1, j[hour] += 1 }), avg = b.length / 52; var l = []; seriesChk = [], h.splice(53, 1), h.splice(0, 1); var m = (new Date).getFullYear(); for (var n in h) if (h.hasOwnProperty(n)) { var o = h[n]; parseInt(n) > currentWeek ? (myDate = getDateOfWeek(parseInt(n), m - 1), yr = m - 1, woy = parseInt(n) - 52) : (woy = parseInt(n), myDate = getDateOfWeek(woy, m), yr = m), month = myDate.getMonth(), seriesChk.push({ w: woy, count: o.length, m: mon(month), yr: yr, ow: 0 == parseInt(n) ? 52 : parseInt(n) }) } seriesChk = sortByKey(seriesChk, "w", "A"); var q = [], r = [], s = [], t = []; maxCount = 0; var u = dojox.charting.Theme.generateGradient; chartColor = crime_code_category ? findCategoryColor(crime_part, crime_code_category, dataConfig[0]) : "#0000FF", dojo.forEach(seriesChk, function (a) { s.push([a.w, a.count]) }); var v = regression(trendType.name, s, trendType.order); trnd = v.series; var w = regression("linear", s, 0), x = "UP_NEGATIVE", y = "#E10000", z = "#007F0E"; switch (w.trendDirection) { case "UP": "POSITIVE" === g ? (x = "UP_POSITIVE", y = "#007F0E", z = "#E10000") : (x = "UP_NEGATIVE", y = "#E10000", z = "#007F0E"); break; default: "POSITIVE" === g ? (x = "DOWN_NEGATIVE", y = "#007F0E", z = "#E10000") : (x = "DOWN_POSITIVE", y = "#E10000", z = "#007F0E") } dojo.byId("imgTrend").src = "img/" + x + ".png", dojo.forEach(seriesChk, function (a) { q.push({ value: a.w + -seriesChk[0].w + 1, text: a.w + "" }), r.push({ value: a.w + -seriesChk[0].w + 1, text: a.m }), l.push({ y: a.count, x: a.w + -seriesChk[0].w + 1, m: a.m, yr: a.yr, w: a.ow, fill: a.count > avg ? y : z }), t.push({ y: parseInt(avg), tooltip: "52 week event average: " + parseInt(avg) }), a.count > maxCount && (maxCount = a.count) }), maxYAxis = maxCount < 100 ? maxCount + 5 : maxCount + 15, require(["dojo/fx/easing"], function (a) { switch (avgLbl = avg < 10 ? avg.toFixed(2) : parseInt(avg), linesColumns = new dojox.charting.Chart(f, { title: "Avg: " + avgLbl + " per week", titlePos: "bottom", titleGap: 8, titleFont: 'normal normal normal 10pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', titleFontColor: "#FFE100" }), linesColumns.setTheme(dojox.charting.themes.Claro), linesColumns.addPlot("Grid", { type: "Grid", hAxis: "x", vAxis: "y", hMajorLines: !0, hMinorLines: !1, vMajorLines: !0, vMinorLines: !1 }), linesColumns.addPlot("default", { type: "Lines", markers: !1, hAxis: "other x", vAxis: "other y", shadow: { dx: 1, dy: 1, width: 2, color: [0, 0, 0, .3] }, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("trendline", trnd, { stroke: { width: 3, color: "white" } }), linesColumns.addSeries("averageline", t, { stroke: { width: 3, color: "#FFE100", style: "Dot" } }), dijit.byId("chartHistogram_" + f).get("value")) { case "BAR_WEEK": linesColumns.addPlot("wk_seriesA", { type: "Columns", hAxis: "x", vAxis: "y", gap: 0, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("A", l, { plot: "wk_seriesA", stroke: { width: 0, color: chartColor } }); break; case "LINE_WEEK": linesColumns.addPlot("wk_seriesA", { type: "Lines", hAxis: "x", vAxis: "y", markers: !0, tension: "S", animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("A", l, { plot: "wk_seriesA", stroke: { width: 2, color: chartColor }, fill: "transparent" }), new dojox.charting.action2d.Magnify(linesColumns, "wk_seriesA"); break; case "AREA_WEEK": linesColumns.addPlot("wk_seriesA", { type: "Areas", hAxis: "x", vAxis: "y", tension: "S", animate: { duration: 1e3, easing: a.linear } }), defaultFill = { type: "linear", space: "shape", x1: 0, y1: 0, x2: 0, y2: 400 }, linesColumns.addSeries("A", l, { plot: "wk_seriesA", fill: u(defaultFill, ColorLuminance(chartColor, -.9), chartColor), stroke: { color: "transparent" } }) } linesColumns.addAxis("y", { min: 0, max: maxYAxis, natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, font: "MainHistogram" == f ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("x", { labels: r, includeZero: !1, minorTicks: !1, font: "MainHistogram" == f ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("other x", { labels: r, includeZero: !1, minorTicks: !1, leftBottom: !1, font: "MainHistogram" == f ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("other y", { min: 0, max: maxYAxis, natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, leftBottom: !1, font: "MainHistogram" == f ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.theme.chart.fill = "#1E1E1E", linesColumns.theme.chart.stroke = { color: "transparent" }, linesColumns.theme.marker.outline.color = "transparent", linesColumns.theme.marker.stroke.color = "transparent", linesColumns.theme.plotarea.fill = "#1E1E1E", linesColumns.theme.plotarea.stroke = "#1E1E1E", linesColumns.theme.axis.stroke.color = "#FFFFFF", linesColumns.theme.axis.tick.fontColor = "#FFFFFF", linesColumns.theme.axis.tick.color = "#FFFFFF", new dojox.charting.action2d.Highlight(linesColumns, "wk_seriesA", { duration: 1e3, easing: dojo.fx.easing.sineOut, highlight: "black" }), new dojox.charting.action2d.Tooltip(linesColumns, "wk_seriesA", { text: function (a) { return numberWithCommas(a.run.data[a.index].y) + " events in week " + a.run.data[a.index].w + ", " + a.run.data[a.index].m + " " + a.run.data[a.index].yr } }), linesColumns.render() }), "MainHistogram" == f && selectHeatChart_onChange(dijit.byId("selectHeatChart_MainHeatTable").get("value")) } catch (a) { eh(a, "finish52Weeks") } finally { hideLW("divWorking_Week"), p = dojo.byId(f), linesColumns.resize(p.clientWidth, p.clientHeight) } } function createTrendTypeMenu(a) { require(["dijit/Menu", "dijit/MenuItem", "dijit/CheckedMenuItem", "dojo/domReady!"], function (b, c, d) { try { regressionMenu = new b({ targetNodeIds: [a] }), regressionMenu.addChild(new d({ id: "mnuLinear_" + a, label: "Linear", class: "mnuTrend", onClick: function (b) { trendType.name = "linear", trendType.order = 0, dojo.query(".mnuTrend").forEach(function (b) { b.attributes.id.value != "mnuLinear_" + a && dijit.byId(b.attributes.id.value).set("checked", !1) }), buildHistogram(a) } })), regressionMenu.addChild(new d({ id: "mnuPolynomial2_" + a, label: "Polynomial (order 2)", class: "mnuTrend", onClick: function () { trendType.name = "polynomial", trendType.order = 2, dojo.query(".mnuTrend").forEach(function (b) { b.attributes.id.value != "mnuPolynomial2_" + a && dijit.byId(b.attributes.id.value).set("checked", !1) }), buildHistogram(a) } })), regressionMenu.addChild(new d({ id: "mnuPolynomial3_" + a, label: "Polynomial (order 3)", class: "mnuTrend", checked: !0, onClick: function () { trendType.name = "polynomial", trendType.order = 3, dojo.query(".mnuTrend").forEach(function (b) { b.attributes.id.value != "mnuPolynomial3_" + a && dijit.byId(b.attributes.id.value).set("checked", !1) }), buildHistogram(a) } })) } catch (a) { eh(a, "createTrendTypeMenu") } }) } function createClassBreaks(a) { try { "Class Breaks by day" == a ? (lyr = mapChart.getLayer(crime_part + " " + crime_days), dojo.byId("lblMapChart").innerHTML = crime_code_category_abbr + " " + crime_days + " (" + crime_geolayer_filter_district + ")") : (lyr = mapChart.getLayer(crime_part + " 52 weeks"), dojo.byId("lblMapChart").innerHTML = crime_code_category_abbr + " 52 wks (" + crime_geolayer_filter_district + ")"), lyr.hide(), buildClassBreakRenderer(lyr) } catch (a) { eh(a, "buildClassBreak") } } function buildClassBreakRenderer(a) { try { require(["esri/symbols/SimpleFillSymbol", "esri/symbols/SimpleLineSymbol", "esri/renderers/ClassBreaksRenderer", "esri/dijit/Legend", "esri/tasks/StatisticDefinition", "esri/plugins/FeatureLayerStatistics", "dojo/number", "dojo/domReady!"], function (b, c, d, e, f, g, h) { showLW("divWorking_Map"); try { if (dojo.forEach(geoLayers, function (a) { mapChart.getLayer("cb_" + a.displayName).setRenderer(null), mapChart.getLayer("cb_" + a.displayName).hide() }), dojo.forEach(mapChart.graphicsLayerIds, function (a) { mapChart.getLayer(a).hide() }), lyrobj = getGeoLayerObject(), statsField = getIRAEventField(crime_part, lyrobj), !statsField) return void myInfo("For this data, a " + lyrobj.displayName + " attribute does not exist. Cannot generate class break map."); lv_gl = getGeoLayer(), lv_dstrct = lv_gl.value.split("|"), lv_l = "ALL" == lv_dstrct[1] ? lyrobj.displayName : geoLayers[0].displayName, lv_categoryType = dijit.byId("selectCatagory").get("value"), lv_category = lv_categoryType.split("_"), f_category = "ALL" == lv_category[1] ? crime_part : lv_category[1], codeField = getCodeFieldByPart(crime_part, dataConfig[0]), byCode = "", "ALL" != lv_category[1] && (codes = findCategoryCodes(crime_part, lv_category[1], dataConfig[0]), byCode = " AND " + codeField + " IN (" + codes + ")"), "ALL" == lv_dstrct[1] ? lv_district = "ALL" : (lv_lbl = lv_gl.label.split(":"), lv_district = dojo.trim(lv_lbl[1])), "ALL" == lv_dstrct[1] ? mapChart.getLayer("cb_" + lv_l).setDefinitionExpression(null) : mapChart.getLayer("cb_" + lv_l).setDefinitionExpression(geoLayers[lv_dstrct[0]].queryField + " = '" + lv_district + "'"); var i = new g({ layer: a }), j = { field: statsField }; i.getUniqueValues(j).then(function (e) { var f = Math.max.apply(Math, e.uniqueValueInfos.map(function (a) { return a.count })), g = Math.min.apply(Math, e.uniqueValueInfos.map(function (a) { return a.count })), h = 5, i = Math.round((f - g) / h), j = new esri.tasks.Query; j.returnGeometry = !1, j.outFields = [statsField], j.where = "1=1", a.queryFeatures(j, function (a) { cbCounterFeatures = a.features, mapChart.getLayer("cb_" + lv_l).show(); var e = { zero: new b(b.STYLE_NULL, new c(c.STYLE_NULL, null, 0), null), one: new b(b.STYLE_SOLID, new c(c.STYLE_SOLID, new dojo.Color([53, 53, 53, .5]), 1), new dojo.Color([0, 97, 0, .7])), two: new b(b.STYLE_SOLID, new c(c.STYLE_SOLID, new dojo.Color([53, 53, 53, .5]), 1), new dojo.Color([122, 171, 0, .7])), three: new b(b.STYLE_SOLID, new c(c.STYLE_SOLID, new dojo.Color([53, 53, 53, .5]), 1), new dojo.Color([255, 255, 0, .7])), four: new b(b.STYLE_SOLID, new c(c.STYLE_SOLID, new dojo.Color([53, 53, 53, .5]), 1), new dojo.Color([255, 153, 0, .7])), five: new b(b.STYLE_SOLID, new c(c.STYLE_SOLID, new dojo.Color([53, 53, 53, .5]), 1), new dojo.Color([255, 34, 0, .7])) }, g = new d(e.zero, calculate_cb_values); g.setMaxInclusive(!0), f > 20 ? (g.addBreak({ minValue: 0, maxValue: i, label: "< " + i, symbol: e.one }), g.addBreak({ minValue: i, maxValue: 2 * i, label: i + "-" + 2 * i, symbol: e.two }), g.addBreak({ minValue: 2 * i, maxValue: 3 * i, label: 2 * i + "-" + 3 * i, symbol: e.three }), g.addBreak({ minValue: 3 * i, maxValue: 4 * i, label: 3 * i + "-" + 4 * i, symbol: e.four }), g.addBreak({ minValue: 4 * i, maxValue: 1 / 0, label: "> " + 4 * i, symbol: e.five })) : f > 5 && f <= 20 ? (g.addBreak({ minValue: 0, maxValue: 4, label: "< 4", symbol: e.one }), g.addBreak({ minValue: 4, maxValue: 8, label: "4-8", symbol: e.two }), g.addBreak({ minValue: 8, maxValue: 12, label: "8-12", symbol: e.three }), g.addBreak({ minValue: 12, maxValue: 16, label: "12-16", symbol: e.four }), g.addBreak({ minValue: 16, maxValue: 1 / 0, label: "> 16", symbol: e.five })) : (g.addBreak({ minValue: 0, maxValue: 0, label: "0", symbol: e.one }), g.addBreak({ minValue: 1, maxValue: 1, label: "1", symbol: e.two }), g.addBreak({ minValue: 2, maxValue: 2, label: "2", symbol: e.three }), g.addBreak({ minValue: 3, maxValue: 3, label: "3", symbol: e.four }), g.addBreak({ minValue: 4, maxValue: 1 / 0, label: "> 3", symbol: e.five })), mapChart.getLayer("cb_" + lv_l).setRenderer(g), RemoveChildren(dojo.byId("mapClassBreakLegend")); var h = dojo.create("table", { style: "width: 100%; height: 100%; border-collapse: collapse" }, null, "only"), j = dojo.create("tbody", null, h); chgt = 100 / g.infos.length, dojo.forEach(g.infos, function (a) { clr = a.symbol.color, clr && (_rgba = rgba(clr.r, clr.g, clr.b, clr.a), row = dojo.create("tr", { style: "height: " + chgt + "%;" }, j, "last"), td = dojo.create("td", { class: "classBreakTD", style: "height: " + chgt + "%; background-color: " + _rgba + ";" }, row, "last"), dojo.create("label", { innerHTML: a.label, class: "classBreakLabels" }, td, "last")) }), dojo.byId("mapClassBreakLegend").appendChild(h) }) }).otherwise(function (a) { hideLW("divWorking_Map"), console.log("An error occurred while calculating %s, Error: %o", "unique values", a) }) } catch (a) { eh(a, "buildClassBreakRenderer") } finally { hideLW("divWorking_Map") } }) } catch (a) { eh(a, "buildClassBreakRenderer") } } function calculate_cb_values(a) { try { lyrobj = getGeoLayerObject(); var b = a.hasOwnProperty("attributes") ? a.attributes[lyrobj.queryField] : a; return statsField = getIRAEventField(crime_part, lyrobj), filteredArr = dojo.filter(cbCounterFeatures, function (a) { return dojo.trim(String(a.attributes[statsField])) == dojo.trim(String(b)) }), filteredArr.length } catch (a) { eh(a, "calculate_cb_values") } } function getClassBreakConfig(a, b) { try { return filteredArr = dojo.filter(dataConfig[0].groups, function (b) { return b.title == a }), rtn = dojo.filter(filteredArr[0].events, function (a) { return lv_type = dijit.byId("selectClassBreakType").get("value"), lvtype = "WEEK" != lv_type ? "chartPie" : "chartLast52Weeks", etitle = "WEEK" != lv_type ? crime_days : "52 weeks", a.parent == lvtype && a.eventTitle == etitle }), rtn2 = dojo.filter(rtn[0].classBreaks, function (a) { return a.aliasname = b }), rtn2[0] } catch (a) { eh(a, "getClassBreakConfig") } } function getIRAEventField(a, b) { switch (filteredArr = dojo.filter(dataConfig[0].groups, function (b) { return b.title == a }), b.displayName) { case "IRA": return filteredArr[0].table + "." + filteredArr[0].iraField; case "Patrol Zone": return filteredArr[0].patrolField ? filteredArr[0].table + "." + filteredArr[0].patrolField : filteredArr[0].table + "." + filteredArr[0].iraField; case "Sector": return filteredArr[0].table + "." + filteredArr[0].sectorField; case "District": return filteredArr[0].table + "." + filteredArr[0].districtField } } function buildHeatIndex(a) { try { RemoveChildren(dojo.byId(a)), chartDayTime && chartDayTime.node.id == a && (chartDayTime.destroy(), chartDayTime = null), val = dijit.byId("chartHistogram_MainHistogram").get("value"), "BAR_DAY" == val || "LINE_DAY" == val ? dojo.byId("lbl" + a).innerHTML = crime_code_category_abbr + " " + crime_days + " (" + crime_geolayer_filter_district + ")" : dojo.byId("lbl" + a).innerHTML = crime_code_category_abbr + " 52 wks (" + crime_geolayer_filter_district + ")"; for (var b = [], c = 0; c < 24; c++) for (var d = 0; d < 7; d++) b.push(daytime[c][d]); sd = standardDeviation(b), av = average(b), mx = Math.max.apply(Math, b), mn = Math.min.apply(Math, b); var e = dojo.create("table", { class: "gridTable" }, null); cellWidth = parseInt(e.clientWidth / 25) + "px"; for (var f = dojo.create("tbody", null, e), g = dojo.create("tr", null, f, "last"), h = -1; h < 25; h++) h > -1 && h < 24 ? dojo.create("td", { innerHTML: h < 10 ? "0" + h : "" + h, class: "gridTableHC_" + a, style: "width: " + cellWidth + " !important" }, g, "last") : h == -1 && dojo.create("td", { innerHTML: "", class: "gridTableHRClear_" + a, style: "width: " + cellWidth }, g, "last"); for (var i = 0; i < 7; i++) { g = dojo.create("tr", null, f, "last"), dojo.create("td", { innerHTML: dow(i), class: "gridTableHR_" + a, style: "width: " + cellWidth }, g, "last"), daysum = 0; for (var j = 0; j < 25; j++) j <= 23 && (clr = "background-color: " + sdColor(sd, av, daytime[j][i]) + " !important; width: " + cellWidth, dojo.create("td", { innerHTML: "MainHeatTable" == a ? "" : daytime[j][i], class: "gridTableCell_" + a, style: clr }, g, "last")) } g = dojo.create("tr", null, f, "last"), dojo.create("td", { innerHTML: "", colspan: 2, class: "gridTableHRClear_" + a, style: "width: " + cellWidth }, g, "last"), clrs = ["#002783", "#1154C1", "#6C9FF8", "#9BBFF9", "#C7E1FC", "#FFFFFF", "#FFFA92", "#F6C05E", "#EF873E", "#EB5738", "#AF2C26"], dojo.forEach(clrs, function (b, c) { clr = "background-color: " + b + " !important", 0 == c ? dojo.create("td", { innerHTML: "MainHeatTable" == a ? "L" : "Low", colspan: 2, class: "gridTableCellLegend_" + a, style: clr }, g, "last") : c == clrs.length - 1 ? dojo.create("td", { innerHTML: "MainHeatTable" == a ? "H" : "High", colspan: 2, class: "gridTableCellLegend_" + a, style: clr }, g, "last") : dojo.create("td", { innerHTML: "", colspan: 2, class: "gridTableCellLegend_" + a, style: clr }, g, "last") }), g = dojo.create("tr", null, f, "last"), td = dojo.create("td", { colspan: 25 }, g, "last"); var k = dojo.create("table", { style: "width:100%" }, td), l = dojo.create("tbody", null, k); g = dojo.create("tr", null, l, "last"), dojo.create("td", { innerHTML: "Standard Deviations", colspan: 4, class: "gridTableCellLegend_" + a }, g, "last"), g = dojo.create("tr", null, l, "last"), dojo.create("td", { innerHTML: "Avg: " + roundNumber(av, 2), class: "gridTableCellStats_" + a }, g, "last"), dojo.create("td", { innerHTML: "Std Dev: " + roundNumber(sd, 2), class: "gridTableCellStats_" + a }, g, "last"), dojo.create("td", { innerHTML: "Min: " + mn, class: "gridTableCellStats_" + a }, g, "last"), dojo.create("td", { innerHTML: "Max: " + mx, class: "gridTableCellStats_" + a }, g, "last"), g = dojo.create("tr", null, l, "last"), dojo.create("td", { innerHTML: "Heat Index", colspan: 4, class: "gridTableCellLegend2_" + a }, g, "last"), dijit.byId(a).set("content", e) } catch (a) { eh(a, "buildHeatIndex") } } function selectHeatChart_onChange(a) { try { "HEATINDEXGRID" === a ? (dojo.byId("tdWeekDaySelector_MainHeatTable").style.display = "none", buildHeatIndex("MainHeatTable")) : (dojo.byId("tdWeekDaySelector_MainHeatTable").style.display = "block", dojo.byId("weekDaySelector_MainHeatTable") ? buildTimeLine("MainHeatTable") : (sel = new dijit.form.Select({ id: "weekDaySelector_MainHeatTable", name: "weekDaySelector_MainHeatTable", style: "width: 80px", autoWidth: !1, options: [{ value: "All Days", label: "All Days" }, { value: "Monday", label: "Monday" }, { value: "Tuesday", label: "Tuesday" }, { value: "Wednesday", label: "Wednesday" }, { value: "Thursday", label: "Thursday" }, { value: "Friday", label: "Friday" }, { value: "Weekdays", label: "Weekdays" }, { value: "Weekend", label: "Weekend" }], value: "All Days", onChange: weekDaySelector_onChange }), dojo.byId("tdWeekDaySelector_MainHeatTable").appendChild(sel.domNode), sel.startup(), buildTimeLine("MainHeatTable"))) } catch (a) { eh(a, "selectHeatChart_onChange") } } function weekDaySelector_onChange(a) { log("weekDaySelector_onChange"), selectHeatChart_onChange("HEATINDEXLINE") } function buildTimeLine(a) { try { RemoveChildren(dojo.byId(a)), chartDayTime && chartDayTime.node.id == a && (chartDayTime.destroy(), chartDayTime = null), dojo.byId("lbl" + a).innerHTML = crime_code_category_abbr + " 52 wks (" + crime_geolayer_filter_district + ")", opt = dijit.byId("weekDaySelector_" + a).get("value"); var b = []; switch (max = 0, day = 0, opt) { case "Monday": day = 1; break; case "Tuesday": day = 2; break; case "Wednesday": day = 3; break; case "Thursday": day = 4; break; case "Friday": day = 5 } switch (opt) { case "All Days": for (var c = 0; c < 25; c++) if (c <= 23) { sum = 0; for (var d = 0; d < 7; d++) sum += daytime[c][d]; b.push({ x: c, y: sum, text: opt, tooltip: numberWithCommas(sum) + " events" }) } break; case "Weekdays": for (var c = 0; c < 25; c++) if (c <= 23) { sum = 0; for (var d = 1; d < 6; d++) sum += daytime[c][d]; b.push({ x: c, y: sum, text: opt, tooltip: numberWithCommas(sum) + " events" }) } break; case "Weekend": for (var c = 0; c < 25; c++) if (c <= 23) { sum = 0; for (var d = 0; d < 7; d++) 0 != d && 6 != d || (sum += daytime[c][d]); b.push({ x: c, y: sum, text: opt, tooltip: numberWithCommas(sum) + " events" }) } break; default: for (var c = 0; c < 25; c++) if (c <= 23) { sum = 0; for (var d = 0; d < 7; d++) d == day && (sum += daytime[c][d]); b.push({ x: c, y: sum, text: opt, tooltip: numberWithCommas(sum) + " events" }) } } require(["dojo/fx/easing"], function (c) { chartDayTime = smallWin ? new dojox.charting.Chart(a, { title: crime_code_category + " Heat Index 52 wks by day", titlePos: "bottom", titleGap: 8, titleFont: 'normal normal normal 10pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', titleFontColor: "orange" }) : new dojox.charting.Chart(a), chartDayTime.setTheme(dojox.charting.themes.Claro), smallWin ? (chartDayTime.addPlot("default", { type: "Areas", hAxis: "x", vAxis: "y", tension: "S", animate: { duration: 1e3, easing: c.linear } }), chartDayTime.addSeries("TimeOfDay", b, { fill: crime_code_category ? findCategoryColor(crime_part, crime_code_category, dataConfig[0]) : "gold", stroke: { color: "transparent" } })) : (chartDayTime.addPlot("default", { type: "Lines", markers: !0, tension: "S", shadow: { dx: 1, dy: 1, width: 4, color: [200, 200, 200, .4] }, animate: { easing: c.linear } }), chartDayTime.addSeries("TimeOfDay", b, { stroke: { width: 2, color: crime_code_category ? findCategoryColor(crime_part, crime_code_category, dataConfig[0]) : "gold" } })), chartDayTime.addAxis("x", { min: 0, max: 23, font: "MainHeatTable" == a ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), ymax = Math.max.apply(Math, b.map(function (a) { return a.y })), chartDayTime.addAxis("y", { min: 0, max: Math.round(1.1 * ymax), vertical: !0, fixLower: "major", fixUpper: "minor", font: "MainHeatTable" == a ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), chartDayTime.theme.chart.fill = "#1E1E1E", chartDayTime.theme.chart.stroke = "transparent", chartDayTime.theme.plotarea.fill = "#1E1E1E", chartDayTime.theme.plotarea.stroke = "#1E1E1E", chartDayTime.theme.axis.stroke.color = "#FFFFFF", chartDayTime.theme.axis.tick.fontColor = "#FFFFFF", chartDayTime.theme.axis.tick.color = "#FFFFFF", chartDayTime.stretchToFit = !0, new dojox.charting.action2d.Magnify(chartDayTime, "default"), new dojox.charting.action2d.Tooltip(chartDayTime, "default"), chartDayTime.render() }) } catch (a) { eh(a, "buildTimeLine") } finally { p = dojo.byId(a), chartDayTime.resize(p.clientWidth, p.clientHeight) } } function mon(a) { switch (a) { case 0: return "Jan"; case 1: return "Feb"; case 2: return "Mar"; case 3: return "Apr"; case 4: return "May"; case 5: return "Jun"; case 6: return "Jul"; case 7: return "Aug"; case 8: return "Sep"; case 9: return "Oct"; case 10: return "Nov"; case 11: return "Dec" } } function dow(a) { switch (a) { case 0: return "S "; case 1: return "M "; case 2: return "T "; case 3: return "W "; case 4: return "T "; case 5: return "F "; case 6: return "S " } } function standardDeviation(a) { var b = average(a), c = a.map(function (a) { var c = a - b, d = c * c; return d }), d = average(c), e = Math.sqrt(d); return e } function average(a) { var b = a.reduce(function (a, b) { return a + b }, 0), c = b / a.length; return c } function sdColor(a, b, c) { return a = parseFloat(a + ""), b = parseFloat(b + ""), c = parseFloat(c + ""), c >= 3 * a + b ? "#AF2C26" : c < 3 * a + b && c >= 2 * a + b ? "#EB5738" : c < 2 * a + b && c >= 1.5 * a + b ? "#EF873E" : c < 1.5 * a + b && c >= 1 * a + b ? "#F6C05E" : c < 1 * a + b && c >= .5 * a + b ? "#FFFA92" : c < .5 * a + b && c >= -.5 * a + b ? "#FFFFFF" : c < -.5 * a + b && c >= -1 * a + b ? "#C7E1FC" : c < -1 * a + b && c >= -1.5 * a + b ? "#9BBFF9" : c < -1.5 * a + b && c >= -2 * a + b ? "#6C9FF8" : c < -2 * a + b && c >= -3 * a + b ? "#1154C1" : c < -3 * a + b ? "#002783" : void 0 } function selectHeatChartMaxContent_onChange(a) { "HEATINDEXGRID" === a ? (dojo.byId("tdWeekDaySelector_MaxContent").style.display = "none", buildHeatIndex("MaxContent")) : (dojo.byId("tdWeekDaySelector_MaxContent").style.display = "block", buildTimeLine("MaxContent")) } function buildLastDays(a) { showLW("divWorking_Week"); try { dayparts = crime_days.split(" "), filteredAry = dojo.filter(crime_group_by_part.events, function (a) { return a.eventTitle == crime_days }), wk_evnt = filteredAry[0], RemoveChildren(dojo.byId(a)), linesColumns && linesColumns.node.id == a && (linesColumns.destroy(), linesColumns = null), dojo.byId("lbl" + a).innerHTML = crime_code_category_abbr + " " + crime_days + " (" + crime_geolayer_filter_district + ")", wk_dateField = get52WeekDateField(crime_part), wk_trend = get52WeekTrend(crime_part); esri.request({ url: adminSOE + "getHistogram", handleAs: "json", content: { title: crime_days, dayorweek: "DAY" + dayparts[0], code: crime_code_category_SOE, group: crime_part, zonefield: crime_geolayer_filter_field, zone: crime_geolayer_filter_district, shift: crime_shift, f: "json" }, callbackParamName: "callback", load: function (b, c) { daytime = new Array(24); for (var d = 0; d < 24; d++) { daytime[d] = new Array(7); for (var e = 0; e < 7; e++) daytime[d][e] = 0 } dojo.forEach(b.hours, function (a) { daytime[a.h][a.d] = a.count }), finishLastDays(wk_evnt, a, b.items, parseInt(dayparts[0]), wk_trend) }, error: function (a, b) { eh(a, "getHistogram") } }) } catch (a) { eh(a, "buildLastDays"), hideLW("divWorking_Week") } } function finishLastDays(a, b, c, d, e) {
    try {
        sum = 0, dojo.forEach(c, function (a) { sum += a.y }); var f = sum / d, g = [], h = [], i = []; maxCount = 0; var j = dojox.charting.Theme.generateGradient; chartColor = crime_code_category ? findCategoryColor(crime_part, crime_code_category, dataConfig[0]) : "#0000FF", dojo.forEach(c, function (a) { a.fill = a.y > f ? "#E10000" : "#007F0E"; var b = a.m.split("."); g.push({ value: a.x, text: b[1] + "/" + b[0] }), i.push({ y: parseInt(f), tooltip: "Event average: " + parseInt(f) }), a.y > maxCount && (maxCount = a.y), h.push([a.x, a.y]) }); var k = regression(trendType.name, h, trendType.order); trnd = k.series; var l = regression("linear", h, 0), m = "UP_NEGATIVE", n = "#E10000", o = "#007F0E"; switch (l.trendDirection) { case "UP": "POSITIVE" === e ? (m = "UP_POSITIVE", n = "#007F0E", o = "#E10000") : (m = "UP_NEGATIVE", n = "#E10000", o = "#007F0E"); break; default: "POSITIVE" === e ? (m = "DOWN_NEGATIVE", n = "#007F0E", o = "#E10000") : (m = "DOWN_POSITIVE", n = "#E10000", o = "#007F0E") } dojo.byId("imgTrend").src = "img/" + m + ".png", maxYAxis = maxCount < 100 ? maxCount + 5 : maxCount + 15, require(["dojo/fx/easing"], function (a) {
            switch (avgLbl = f < 10 ? f.toFixed(2) : parseInt(f),
            linesColumns = new dojox.charting.Chart(b, { title: "Avg: " + avgLbl + " per day", titlePos: "bottom", titleGap: 8, titleFont: 'normal normal normal 10pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', titleFontColor: "#FFE100" }), linesColumns.setTheme(dojox.charting.themes.Claro), linesColumns.addPlot("Grid", { type: "Grid", hAxis: "x", vAxis: "y", hMajorLines: !0, hMinorLines: !1, vMajorLines: !0, vMinorLines: !1 }), linesColumns.addPlot("default", { type: "Lines", markers: !1, hAxis: "other x", vAxis: "other y", shadow: { dx: 1, dy: 1, width: 2, color: [0, 0, 0, .3] }, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("trendline", trnd, { stroke: { width: 3, color: "white" }, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("averageline", i, { stroke: { width: 3, color: "#FFE100", style: "Dot" }, animate: { duration: 1e3, easing: a.linear } }), dijit.byId("chartHistogram_" + b).get("value")) { case "BAR_DAY": linesColumns.addPlot("wk_seriesA", { type: "Columns", hAxis: "x", vAxis: "y", gap: 0, animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("A", c, { plot: "wk_seriesA", stroke: { width: 0, color: chartColor } }); break; case "LINE_DAY": linesColumns.addPlot("wk_seriesA", { type: "Lines", hAxis: "x", vAxis: "y", markers: !0, tension: "S", animate: { duration: 1e3, easing: a.linear } }), linesColumns.addSeries("A", c, { plot: "wk_seriesA", stroke: { width: 2, color: chartColor }, fill: "transparent" }), new dojox.charting.action2d.Magnify(linesColumns, "wk_seriesA"); break; case "AREA_DAY": linesColumns.addPlot("wk_seriesA", { type: "Areas", hAxis: "x", vAxis: "y", tension: "S", animate: { duration: 1e3, easing: a.linear } }), defaultFill = { type: "linear", space: "shape", x1: 0, y1: 0, x2: 0, y2: 400 }, linesColumns.addSeries("A", c, { plot: "wk_seriesA", fill: j(defaultFill, ColorLuminance(chartColor, -.9), chartColor), stroke: { color: "transparent" } }) } linesColumns.addAxis("y", { min: 0, max: maxYAxis, natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.addAxis("x", { labels: g, includeZero: !1, minorTicks: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', natural: !0, majorTickStep: Math.round(c.length / 7) }), linesColumns.addAxis("other x", { labels: g, includeZero: !1, minorTicks: !1, leftBottom: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', natural: !0, majorTickStep: Math.round(c.length / 7) }), linesColumns.addAxis("other y", { min: 0, max: maxYAxis, natural: !0, vertical: !0, includeZero: !0, minorTicks: !1, leftBottom: !1, font: "MainHistogram" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 14pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' }), linesColumns.theme.chart.fill = "#1E1E1E", linesColumns.theme.chart.stroke = { color: "transparent" }, linesColumns.theme.marker.outline.color = "transparent", linesColumns.theme.marker.stroke.color = "transparent", linesColumns.theme.plotarea.fill = "#1E1E1E", linesColumns.theme.plotarea.stroke = "#1E1E1E", linesColumns.theme.axis.stroke.color = "#FFFFFF", linesColumns.theme.axis.tick.fontColor = "#FFFFFF", linesColumns.theme.axis.tick.color = "#FFFFFF", new dojox.charting.action2d.Highlight(linesColumns, "wk_seriesA", { duration: 1e3, easing: dojo.fx.easing.sineOut, highlight: "black" }), new dojox.charting.action2d.Tooltip(linesColumns, "wk_seriesA", { text: function (a) { return numberWithCommas(a.run.data[a.index].y) + " events on day of " + a.run.data[a.index].hint } }), linesColumns.render()
        }), "MainHistogram" == b && selectHeatChart_onChange(dijit.byId("selectHeatChart_MainHeatTable").get("value"))
    } catch (a) { eh(a, "finishLastDays") } finally { hideLW("divWorking_Week"), p = dojo.byId(b), linesColumns.resize(p.clientWidth, p.clientHeight) }
} function buildPie(a) { showLW("divWorking_Pie"); try { "BAR" == dijit.byId("selectPie_" + a).get("value") ? dojo.byId("chartPie_legend").className = "myhideG" : dojo.byId("chartPie_legend").className = "myshowG", dijit.byId("chartPie_main").resize(), RemoveChildren(dojo.byId(a)), chartPie && chartPie.node.id == a && (chartPie.destroy(), chartPie = null), chartPieLegend && (chartPieLegend.destroy(), chartPieLegend = null); esri.request({ url: adminSOE + "getPieSummary", handleAs: "json", content: { titles: crime_days, group: crime_part, zonefield: crime_geolayer_filter_field, zone: crime_geolayer_filter_district, shift: crime_shift, f: "json" }, callbackParamName: "callback", load: function (b, c) { finishPie(b.items, a) }, error: function (a, b) { eh(a, "getSummary_pie") } }); dojo.byId("lbl" + a).innerHTML = crime_part + " " + crime_days + "  (" + crime_geolayer_filter_district + ")" } catch (a) { eh(a, "buildPie") } } function finishPie(a, b) { try { p = dojo.byId(b), "ChartPie" == b ? radius = p.clientHeight < p.clientWidth ? parseInt(p.clientHeight / 2 - 10) : radius = parseInt(p.clientWidth / 2 - 10) : radius = p.clientHeight < p.clientWidth ? parseInt(p.clientHeight / 2 - 60) : radius = parseInt(p.clientWidth / 2 - 60), require(["dojo/fx/easing"], function (c) { var d = dojox.charting; switch (chartPie = new d.Chart(b), chartPie.setTheme(dojox.charting.themes.Chris), dijit.byId("selectPie_" + b).get("value")) { case "STACKED": a = sortByKey(a, "text", "A"), chartPie.addPlot("default", { type: "StackedColumns", gap: 0, minBarSize: 2 * radius, maxBarSize: 2 * radius, animate: { duration: 1e3, easing: c.linear } }), dojo.forEach(a, function (a) { chartPie.addSeries(a.category, [a]) }), new d.action2d.Highlight(chartPie, "default", { duration: 450, easing: dojo.fx.easing.bounceOut }), chartPie.theme.series.stroke.color = "#353535"; break; case "PIE": a = sortByKey(a, "text", "A"), chartPie.addPlot("default", { type: "Pie", font: "bold normal 12pt sans-serif", fontColor: "#ccc", labelWiring: "#ccc", htmlLabels: "MaxContent" == b, omitLabels: "MaxContent" != b, fixed: !0, precision: 1, labelOffset: 10, labelStyle: "MaxContent" == b ? "columns" : "auto", radGrad: "native", radius: radius, animate: { duration: 2e3, easing: c.quintIn } }), chartPie.addSeries("Series A", a), chartPie.theme.series.stroke.color = "#353535"; break; case "BAR": a = sortByKey(a, "y", "D"), "ChartPie" == b && a.length > 11 && a.splice(10, a.length - 10), a = sortByKey(a, "y", "A"), ylabels = [], dojo.forEach(a, function (a, b) { cat = a.text.split(" "), ylabels.push({ value: b + 1, text: dojo.trim(cat[0]) }) }), chartPie.addPlot("default", { type: "Bars", gap: 1, labels: !0, labelStyle: "outside", labelOffset: 20, fontColor: "white", precision: 0, font: "ChartPie" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 11pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', animate: { duration: 2e3, easing: c.linear } }), chartPie.addSeries("Series A", a), xmax = Math.max.apply(Math, a.map(function (a) { return a.y })), chartPie.addAxis("x", { min: 0, max: Math.round(1.1 * xmax), majorLabels: !1, minorTicks: !1 }), chartPie.addAxis("y", { rotation: 0, labels: ylabels, vertical: !0, includeZero: !1, majorLabels: !0, minorLabels: !0, font: "ChartPie" == b ? 'normal normal normal 8pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif' : 'normal normal normal 11pt "Myriad Pro", "Trebuchet MS", Myriad, "Liberation Sans", "Nimbus Sans L", "Helvetica Neue", Helvetica, Arial, sans-serif', fontColor: "yellow" }), chartPie.theme.series.stroke.color = "transparent", chartPie.theme.axis.stroke.color = "transparent", chartPie.theme.axis.tick.fontColor = "transparent", chartPie.theme.axis.tick.color = "transparent" } chartPie.theme.chart.fill = "#1E1E1E", chartPie.theme.chart.stroke = "transparent", chartPie.theme.series.stroke.width = "1", chartPie.theme.plotarea.fill = "#1E1E1E", chartPie.theme.plotarea.stroke = "#1E1E1E", new d.action2d.Highlight(chartPie, "default"), new dojox.charting.action2d.MoveSlice(chartPie), new d.action2d.Tooltip(chartPie, "default", { text: function (a) { return numberWithCommas(a.run.data[a.index].tooltip) } }), chartPie.render(), "ChartPie" == b && chartPie.connectToPlot("default", function (a) { if ("onclick" == a.type) { switch (a.element) { case "slice": data = a.run.data[a.x], ary = data.text.split(" "); break; default: ary = a.y.text.split(" ") } opts = dijit.byId("selectCatagory").getOptions(), filteredArr = dojo.filter(opts, function (a) { return aary = a.value.split("_"), aary[2] == ary[0] }), dijit.byId("selectCatagory").set("value", filteredArr[0].value) } }) }), "ChartPie" == b && "BAR" != dijit.byId("selectPie_" + b).get("value") && (chartPieLegend = new dojox.charting.widget.Legend({ chartRef: chartPie, horizontal: !1 }), dijit.byId("chartPie_legend").set("content", chartPieLegend)) } catch (a) { eh(a, "finishPie") } finally { hideLW("divWorking_Pie"), p = dojo.byId(b), chartPie.resize(p.clientWidth, p.clientHeight) } } function toggleCodeCategory(a) { try { log("toggleCodeCategory"), blur(); for (var b = dojo.query(".btnMainStats"), c = 0, d = b.length; c < d; c++) nm = b[c].attributes[2].value, dijit.byId(nm).set("checked", nm == a.id); catitems = getCategoriesByPart(a.value, dataConfig[0]), opts = [], dojo.forEach(catitems, function (b) { opts.push({ value: a.value + "_" + b.category + "_" + b.abbr, label: b.category, selected: !1 }) }), opts.unshift({ value: a.value + "_ALL_" + a.value, label: "<div class='geoZoom'>" + a.value + "</div>", selected: !0 }), dijit.byId("selectCatagory").removeOption(dijit.byId("selectCatagory").getOptions()), dijit.byId("selectCatagory").options = opts, dijit.byId("selectCatagory").set("value", a.value + "_ALL_" + a.value), grp = getGroupByPart(a.value, dataConfig[0]), dojo.byId("shiftSelector").style.visibility = grp.shiftField ? "visible" : "hidden" } catch (a) { eh(a, "toggleCodeCategory") } } function getGroupByPart(a, b) { return filteredAry = dojo.filter(b.groups, function (b) { return b.title == a }), filteredAry[0] } function getCategoriesByPart(a, b) { return ary = [], filteredAry = dojo.filter(b.groups, function (b) { return b.title == a }), dojo.forEach(filteredAry[0].codeTable, function (b) { b.part != a && "ALL" != a.toUpperCase() || ary.push({ category: b.category, abbr: b.abbr }) }), ary = sortByKey(ary, "category", "A"), ary } function getCodeFieldByPart(a, b) { return filteredAry = dojo.filter(b.groups, function (b) { return b.title == a }), filteredAry[0].table + "." + filteredAry[0].codeFieldName } function findCategoryAbbr(a, b, c) { return filteredAry = dojo.filter(c.groups, function (b) { return b.title == a }), group = dojo.filter(c.groups, function (b) { return b.title == a }), filteredAry = dojo.filter(group[0].codeTable, function (a) { return a.category == b }), filteredAry[0].abbr } function findCategoryCodes(a, b, c) { return group = dojo.filter(c.groups, function (b) { return b.title == a }), filteredAry = dojo.filter(group[0].codeTable, function (a) { return a.category == b }), scode = "", dojo.forEach(filteredAry[0].codes, function (a) { "" == scode ? scode += "'" + a + "'" : scode += ",'" + a + "'" }), scode } function findCategoryColor(a, b, c) { return group = dojo.filter(c.groups, function (b) { return b.title == a }), filteredAry = dojo.filter(group[0].codeTable, function (a) { return a.category == b }), filteredAry.length > 0 ? filteredAry[0].color : "#0026FF" } function findCategoryByCode(a, b) { return filteredAry = dojo.filter(b.codeTable, function (b) { return b.codes.indexOf(a) > -1 }), filteredAry.length > 0 ? filteredAry[0].category : null } function eh(a, b) { log((new Error).stack); var c = "There was an error on this page.<br /><br />"; dojo.isIE && (c += "<b>Error description:</b> " + a.description + "<br />"), c += "<b>Error name:</b> " + a.name + "<br />", c += "<b>Error message:</b> " + a.message + "<br />", dojo.isIE && (c += "<b>Error number:</b> " + a.number + "<br />"), dojo.isFF && (c += "<b>Line number:</b> " + a.lineNumber + "<br />"), dojo.isSafari && (c += "<b>Line number:</b> " + a.line + "<br />"), c += "<b>Function:</b> " + b + "<br /><br />", c += "Click OK to continue.", hideWorking(), myAlert(c) } function myAlert(a) { hideWorking(), dojo.byId("divMessage").innerHTML = a, dijit.byId("dialogAlertMessage").show(), log(a) } function myInfo(a) { hideWorking(), dojo.byId("divInformation").innerHTML = a, dijit.byId("dialogInformationMessage").show(), log(a) } function log(a) { debugMode && console.log(a) } function showWorking(a) { dojo.byId("divLoadingIndicator").style.display = "block", dojo.byId("loadingMessage").innerHTML = a, log(a) } function updateWorking(a) { dojo.byId("loadingMessage").innerHTML = a, log(a) } function hideWorking() { dojo.byId("divLoadingIndicator").style.display = "none" } function showLW(a) { dojo.byId(a).style.display = "block" } function hideLW(a) { dojo.byId(a).style.display = "none" } function getGeoLayerObject() { return filteredArr = dojo.filter(dijit.byId("selectDistrict").getOptions(), function (a) { return a.selected }), val = filteredArr[0].value.split("|"), "ALL" == val[1] ? (filteredArr2 = dojo.filter(geoLayers, function (a) { return a.displayHeader == val[2] }), filteredArr2[0]) : geoLayers[0] } function getGeoEventField(a) { switch (val = dijit.byId("selectDistrict").get("value"), ary = val.split("|"), filteredArr = dojo.filter(dataConfig[0].groups, function (b) { return b.title == a }), ary[2]) { case "IRAs": return filteredArr[0].table + "." + filteredArr[0].iraField; case "Patrol Zones": return filteredArr[0].table + "." + filteredArr[0].patrolField; case "Sectors": return filteredArr[0].table + "." + filteredArr[0].sectorField; case "Districts": return filteredArr[0].table + "." + filteredArr[0].districtField } } function getGeoVars() { return esri.request({ url: "json/fle_admin_zone.json", handleAs: "json" }) } function constructGeos() { try { var a = []; dojo.forEach(geoLayers, function (b) { b.useInDropDown && dojo.forEach(b.geos, function (b) { a.push({ value: b.value, label: b.label }) }) }), sel = new dijit.form.Select({ id: "selectDistrict", name: "selectDistrict", style: "width: 100px", autoWidth: !1, maxHeight: 200, options: a, onChange: function (a) { try { if (log("selectDistrict_OnChange (" + a + ")"), a) { getAnalysisVars(), ary_evt = a.split("|"), qk = geoLayers[parseInt(ary_evt[0])]; var b = []; if (vislayers = [], dojo.forEach(geoLayers, function (a) { id = a.layerIndex, id == qk.layerIndex && vislayers.push(id) }), mapChart.getLayer("olyr").setVisibleLayers(vislayers, !1), "ALL" != ary_evt[1]) { var c = qk.geos[parseInt(ary_evt[1]) + 1].poly, d = { xmin: c[0].Value, ymin: c[1].Value, xmax: c[2].Value, ymax: c[3].Value, spatialReference: { wkid: c[4].Value[0].Value } }, e = new esri.geometry.Extent(d); mapChart.setExtent(e, !0), b[qk.layerIndex] = qk.queryField + " = '" + qk.geos[parseInt(ary_evt[1]) + 1].name + "'" } else mapChart.setExtent(new esri.geometry.Extent(XMin, YMin, XMax, YMax, new esri.SpatialReference(SR))), b[qk.layerIndex] = null; mapChart.getLayer("olyr").setLayerDefinitions(b), buildSummaryTable("ChartToDateSummary"), buildPie("ChartPie"), setLyrDefs(), buildHistogram("MainHistogram"), toggleLayerVisibility() } } catch (a) { eh(a, "selectDistrict_OnChange") } } }), dojo.byId("spatialSelector").appendChild(sel.domNode), sel.startup() } catch (a) { eh(a, "constructGeos") } } function geoLayerQuery(a) { try { var b = new esri.tasks.QueryTask(adminMap + "/" + a.layerIndex), c = new esri.tasks.Query; return c.returnGeometry = !0, c.outSpatialReference = mapChart.spatialReference, c.outFields = ["*"], c.where = "1=1", c.orderByFields = [a.queryField + " ASC"], b.execute(c) } catch (a) { return eh(a, "geoLayerQuery"), null } } function toggleLayerVisibility() { log("toggleLayerVisibility"); try { clusterLayer && (mapChart.removeLayer(clusterLayer), clusterLayer = null), mapChart.infoWindow.hide(), dojo.forEach(mapChart.graphicsLayerIds, function (a) { mapChart.getLayer(a).hide() }), lyr = mapChart.getLayer(crime_part + " " + crime_days), dojo.byId("lblMapChart").innerHTML = crime_code_category_abbr + " " + crime_days + " (" + crime_geolayer_filter_district + ")", mapChartRenderType_onChange(dijit.byId("mapChartRenderType").get("value")), mapChart.getScale() <= 1e5 && "Pin Map" == dijit.byId("mapChartRenderType").get("value") || "Heat Map" == dijit.byId("mapChartRenderType").get("value") ? lyr.show() : lyr.hide(), lyr.refresh() } catch (a) { eh(a, "toggleLayerVisibility") } } function mapChartRenderType_onChange(a) { try { switch (mapChart.infoWindow.hide(), lv_grp = getGroupByPart(crime_part, dataConfig[0]), lyr = mapChart.getLayer(crime_part + " " + crime_days), dojo.forEach(geoLayers, function (a) { mapChart.getLayer("cb_" + a.displayName).setRenderer(null), mapChart.getLayer("cb_" + a.displayName).hide() }), clusterLayer && (mapChart.removeLayer(clusterLayer), clusterLayer = null), lyr.setRenderer(null), lyr.hide(), a) { case "Pin Map": dojo.byId("mapClassBreakLegend").style.display = "none", showLW("divWorking_Map"); var b = new esri.tasks.Query; b.returnGeometry = !0, b.outFields = ["*"], b.where = "1=1", lyr.queryFeatures(b, function (a) { var b = dojo.map(a.features, function (a) { return { x: a.geometry.x, y: a.geometry.y, attributes: a.attributes } }), c = dojo.filter(b, function (a) { return a && IsNumeric(a.x) && IsNumeric(a.y) }); require(["extras/ClusterLayer"], function (a) { var b = new esri.symbol.SimpleMarkerSymbol; b.setPath("m 10.5,6.5 a 4,4 0 0 1 -4,4 4,4 0 0 1 -4,-4 4,4 0 0 1 4,-4 4,4 0 0 1 4,4 z"), b.setColor("#FF0000"), b.setOutline(null), b.setSize(8), clusterLayer = new a({ data: c, distance: 100, id: "clusters", labelColor: "#fff", labelOffset: 10, resolution: mapChart.extent.getWidth() / mapChart.width, singleSymbol: b, showSingles: !0, singleTemplate: new esri.InfoTemplate("Info", lv_grp.infotemp.split("|").join("<br />")) }); var d = (new esri.symbol.SimpleMarkerSymbol).setSize(4), e = new esri.renderer.ClassBreaksRenderer(d, "clusterCount"), f = "./extras/shapes/", g = new esri.symbol.PictureMarkerSymbol(f + "BluePin1LargeB.png", 40, 40).setOffset(0, 15), h = new esri.symbol.PictureMarkerSymbol(f + "GreenPin1LargeB.png", 64, 64).setOffset(0, 15), i = new esri.symbol.PictureMarkerSymbol(f + "RedPin1LargeB.png", 90, 90).setOffset(0, 15), j = new esri.symbol.PictureMarkerSymbol(f + "PurplePin1LargeB.png", 72, 72).setOffset(0, 15); e.addBreak(0, 9, g), e.addBreak(9, 200, h), e.addBreak(200, 1e3, j), e.addBreak(1e3, 1 / 0, i), clusterLayer.setRenderer(e), mapChart.addLayer(clusterLayer) }) }, function (a) { log(a), hideLW("divWorking_Map") }), hideLW("divWorking_Map"); break; case "Heat Map": dojo.byId("mapClassBreakLegend").style.display = "none", lyr.show(); mapChart.getScale(); require(["esri/renderers/smartMapping"], function (a) { a.createHeatmapRenderer({ basemap: mapChart.getBasemap(), maxRatio: 1, blurRadius: 10, layer: lyr, fadeToTransparent: !0, scheme: { colors: ["rgba(0, 255, 0, 0)", "rgba(0, 255, 0, 0.7)", "rgba(255, 216, 0, 0.7)", "rgba(255, 106, 0, 0.7)", "rgba(255, 0, 0, 0.7)"] } }).then(function (a) { lyr.setRenderer(a.renderer) }) }); break; default: dojo.byId("mapClassBreakLegend").style.display = "block", createClassBreaks(a) } lyr.refresh() } catch (a) { eh(a, "mapChartRenderType_onChange") } } function getVars() { return updateWorking("loading variables"), esri.request({ url: "json/fle_admin.json", handleAs: "json" }) } function buildShift() { var a = esri.request({ url: "json/fle_admin_shift.json", handleAs: "json", callbackParamName: "callback" }); a.then(function (a) { shiftObj = a.shifts, opts = [], opts.push({ value: "ALL", label: "<div class='geoZoom'>" + a.displayHeader + "</div>", selected: !0 }), dojo.forEach(a.shifts, function (a) { opts.push({ value: a.code, label: a.label }) }), shiftOptions = opts, sel = new dijit.form.Select({ id: "selectShift", name: "selectShift", options: opts, onChange: function (a) { getAnalysisVars(), setLyrDefs(), buildSummaryTable("ChartToDateSummary"), buildPie("ChartPie"), buildHistogram("MainHistogram"), toggleLayerVisibility(), mapChartRenderType_onChange(dijit.byId("mapChartRenderType").get("value")) } }), dojo.byId("shiftSelector").appendChild(sel.domNode), sel.startup() }, function (a) { log("Error: ", a.message) }) } function loadTypes(a) { buildShift(), updateWorking("loading layers ..."), dataConfig = a.Configurations; try { opts = [], lyrsToAdd = [], olyr = new esri.layers.ArcGISDynamicMapServiceLayer(adminMap, { id: "olyr", opacity: .4, visible: !0 }), olyr.on("update-end", function (a) { e = a }), olyr.on("error", function (a) { e = a }), lyrsToAdd.push(olyr), tbl = dojo.byId("eventGroups"), bod = dojo.create("tbody", null, tbl), row = dojo.create("tr", null, bod, "last"), dojo.forEach(dataConfig[0].groups, function (a, b) { td = dojo.create("td", { style: "text-align: left; vertical-align: middle;" }, row, "last"), iname = a.title.split(" ").join("").toLowerCase() + "Icon", btn = new dijit.form.ToggleButton({ id: "btnToggle_" + b, title: a.title, iconClass: iname, showLabel: !1, class: "btnMainStats", checked: 0 == b, label: a.title, value: a.title, onClick: function () { toggleCodeCategory(this) } }), td.appendChild(btn.domNode), btn.startup() }), dijit.byId("divMainContainer").resize(), dijit.byId("divMainCenter").resize(), dojo.forEach(dataConfig, function (a, b) { dojo.forEach(a.groups, function (c, d) { dojo.forEach(c.codeTable, function (a) { a.codes = a.codes.split(",") }), dojo.forEach(c.events, function (e, f) { "chartPie" == e.parent && 0 == b && 0 == d && opts.push({ value: e.eventTitle, label: e.eventTitle }); var g = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_CIRCLE, 8, null, new esri.Color([0, 0, 0, .9])); if (e.eventTitle.indexOf("days") > -1 || e.eventTitle.indexOf("weeks") > -1) { flyr = new esri.layers.FeatureLayer(a.eventService + e.index, { id: c.title + " " + e.eventTitle, outFields: ["*"], mode: esri.layers.FeatureLayer.MODE_ONDEMAND, infoTemplate: new esri.InfoTemplate("Info", c.infotemp.split("|").join("<br />")), maxAllowableOffset: 1e3, visible: !1 }); var h = new esri.renderer.UniqueValueRenderer(g, c.table + "." + c.codeFieldName); dojo.forEach(c.codeTable, function (a) { dojo.forEach(a.codes, function (b) { sym = new esri.symbol.SimpleMarkerSymbol, sym.setPath("m 10.5,6.5 a 4,4 0 0 1 -4,4 4,4 0 0 1 -4,-4 4,4 0 0 1 4,-4 4,4 0 0 1 4,4 z"), sym.setColor(a.color), sym.setOutline(null), sym.setSize(8), h.addValue(b, sym) }) }), dojo.mixin(c, { pinmap: h }); var i = new esri.renderer.HeatmapRenderer({ colors: ["rgba(0, 255, 0, 0)", "rgba(0, 255, 0, 0.5)", "rgba(255, 216, 0, 0.5)", "rgba(255, 106, 0, 0.5)", "rgba(255, 0, 0, 0.5)"], blurRadius: 12, maxPixelIntensity: 40, minPixelIntensity: 1 }); dojo.mixin(c, { heatmap: i }), flyr.on("update-start", function () { }), flyr.on("update-end", function (a) { log("layer " + a.target.id + " update ended"), a.error && log("ERROR (update-end): " + a.target.id + " > " + a.error.message) }), flyr.on("error", function (a) { log("ERROR (error): " + a.target.id + " > " + a.error.message) }), lyrsToAdd.push(flyr) } else "LYWK" == e.eventTitle || "WTD" == e.eventTitle || "MTD" == e.eventTitle || "YTD" == e.eventTitle ? (flyr = new esri.layers.FeatureLayer(a.eventService + e.index, { id: c.title + " " + e.eventTitle, outFields: ["*"], mode: esri.layers.FeatureLayer.MODE_ONDEMAND, visible: !1 }), flyr.setDefinitionExpression(c.table + "." + c.dateFieldName + " >= " + e.startDateRange + " AND " + c.table + "." + c.dateFieldName + " <= " + e.endDateRange), flyr.on("update-end", function (a) { log("layer " + a.target.id + " update ended"), a.error && log("ERROR (update-end): " + a.target.id + " > " + a.error.message) }), flyr.on("error", function (a) { log("ERROR (error): " + a.target.id + " > " + a.error.message) }), lyrsToAdd.push(flyr)) : (flyr = new esri.layers.FeatureLayer(a.eventService + e.index, { id: c.title + " " + e.eventTitle, outFields: ["*"], mode: esri.layers.FeatureLayer.MODE_ONDEMAND, visible: !1 }), flyr.on("update-end", function (a) { log("layer " + a.target.id + " update ended"), a.error && log("ERROR (update-end): " + a.target.id + " > " + a.error.message) }), flyr.on("error", function (a) { log("ERROR (error): " + a.target.id + " > " + a.error.message) }), lyrsToAdd.push(flyr)) }) }) }), sel = new dijit.form.Select({ id: "selectDay", name: "selectDay", style: "width: 100px", autoWidth: !1, options: opts, value: dataConfig[0].groups[0].events[0].eventTitle, onChange: function (a) { getAnalysisVars(), setLyrDefs(), buildPie("ChartPie"), val = dijit.byId("chartHistogram_MainHistogram").get("value"), "BAR_DAY" != val && "LINE_DAY" != val || buildLastDays("MainHistogram"), toggleLayerVisibility(), mapChartRenderType_onChange(dijit.byId("mapChartRenderType").get("value")) } }), dojo.byId("daySelector").appendChild(sel.domNode), sel.startup(), catitems = getCategoriesByPart(dataConfig[0].groups[0].title, dataConfig[0]), opts = [], dojo.forEach(catitems, function (a) { opts.push({ value: dataConfig[0].groups[0].title + "_" + a.category + "_" + a.abbr, label: a.category, selected: !1 }) }), opts.unshift({ value: dataConfig[0].groups[0].title + "_ALL_" + dataConfig[0].groups[0].title, label: "<div class='geoZoom'>" + dataConfig[0].groups[0].title + "</div>", selected: !0 }), sel = new dijit.form.Select({ id: "selectCatagory", style: "width: 100px", autoWidth: !1, options: opts, value: dataConfig[0].groups[0].title + "_ALL", onChange: function (a) { try { getAnalysisVars(), ttl = a.split("_"), "ALL" == ttl[1] ? (crime_summary_selected_category = null, buildPie("ChartPie"), buildSummaryTable("ChartToDateSummary")) : (crime_summary_selected_category = ttl[1], buildSummaryTable("ChartToDateSummary")), setLyrDefs(), buildHistogram("MainHistogram"), toggleLayerVisibility() } catch (a) { eh(a, "selectCategory onChange") } } }), dojo.byId("catagorySelector").appendChild(sel.domNode), sel.startup(), createTrendTypeMenu("MainHistogram"), popup = new esri.dijit.Popup({ offsetX: 0, offsetY: 0, highlight: !0, titleInBody: !1, visibleWhenEmpty: !0, closestFirst: !0, marginLeft: 20, marginTop: 20, markerSymbol: new esri.symbol.SimpleMarkerSymbol("circle", 26, null, new esri.Color([0, 0, 0, .25])), fillSymbol: new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, null, new esri.Color([0, 0, 0, .75])) }, dojo.create("div")), mapChart = new esri.Map("mapChart", { extent: new esri.geometry.Extent(XMin, YMin, XMax, YMax, new esri.SpatialReference(SR)), logo: !0, slider: !0, sliderStyle: "small", infoWindow: popup, nav: !1, autoResize: !0, showAttribution: !1 }), mapChart.setBasemap("dark-gray"), mapChart.on("update-start", function () { showLW("divWorking_Map") }), mapChart.on("update-end", function (a) { hideLW("divWorking_Map") }), mapChart.on("zoom-end", function (a) { log("map chart zoom end"), maxOffset = calcOffset(), mapChart.getLayer(crime_part + " " + crime_days).setMaxAllowableOffset(maxOffset) }), mapChart.on("extent-change", function (a) { mapChart.infoWindow.hide(), mapChart.infoWindow.isShowing && (a.delta.y > 0 || a.delta.x > 0) && (log("map chart extent-change clear popup"), mapChart.infoWindow.hide()) }), geometryService = new esri.tasks.GeometryService(geoService), mapChart.on("load", function (a) { try { getGeoVars().then(function (a) { geoLayers = a.zones, dojo.forEach(geoLayers, function (a) { lyr = new esri.layers.FeatureLayer(adminMap + "/" + a.layerIndex, { id: "cb_" + a.displayName, outFields: ["*"], mode: esri.layers.FeatureLayer.MODE_ONDEMAND, infoTemplate: new esri.InfoTemplate(a.displayName + " ${" + a.queryField + "}", "${" + a.queryField + ":calculate_cb_values} events"), visible: !1 }), a.useInDropDown && lyr.on("dbl-click", function (a) { lyrobj = getGeoLayerObject(), lyrobj_queryField = lyrobj.queryField, val = a.graphic.attributes[lyrobj_queryField], filteredArr = dojo.filter(dijit.byId("selectDistrict").getOptions(), function (a) { return a.label == lyrobj.displayName + ": " + val }), dijit.byId("selectDistrict").set("value", filteredArr[0].value) }), lyrsToAdd.push(lyr) }), mapChart.addLayers(lyrsToAdd) }, function (a) { log("ERROR: " + a.message) }) } catch (a) { eh(a, "map load") } }), mapChart.on("layers-add-result", function (a) { try { log("map chart layers-add-result"), constructGeos(), buildInititalCharts(); var b = new esri.dijit.HomeButton({ map: mapChart, extent: new esri.geometry.Extent(XMin, YMin, XMax, YMax, new esri.SpatialReference(SR)) }, "btnHome"); b.startup(), createBaseMaps(), hideWorking() } catch (a) { eh(a, "map chart layers-add-result") } }), mapChart.on("key-down", function (a) { 27 === a.keyCode && cleanUp() }) } catch (a) { eh(a, "loadTypes") } } function createBaseMaps() { require(["esri/dijit/BasemapGallery"], function (a) { var b = new a({ showArcGISBasemaps: !0, map: mapChart }); b.startup(); var c = []; b.on("load", function (a) { dojo.forEach(b.basemaps, function (a) { c.push({ selected: "Dark Gray Canvas" == a.title, value: a.id, label: "<img width='16px' height='16px' src='" + a.thumbnailUrl + "' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>" + a.title + "</label>" }) }), sel = new dijit.form.Select({ id: "selectBaseMap", name: "selectBaseMap", style: "width: 100px", maxHeight: 200, options: c, onChange: function (a) { bm = mapChart.getBasemap(), b.select(a) } }), dojo.byId("tdBaseMaps").appendChild(sel.domNode) }) }) } function getAnalysisVars() { crime_part = getMainStatsValue(), crime_shift = dijit.byId("selectShift").get("value"), crime_geolayer_filter = getGeoLayer(), crime_group_by_part = getGroupByPart(crime_part, dataConfig[0]), crime_days = dijit.byId("selectDay").get("value"); dijit.byId("selectDistrict"); if (filteredArr = dojo.filter(dataConfig[0].groups, function (a) { return a.title === crime_part }), dojo.forEach(dijit.byId("selectDistrict").getOptions(), function (a) { switch (ary = a.value.split("|"), ary[2]) { case "Patrol Zones": a.disabled = !filteredArr[0].patrolField; break; case "Sectors": a.disabled = !filteredArr[0].sectorField; break; case "Districts": a.disabled = !filteredArr[0].districtField } }), dijit.byId("selectDistrict").startup(), filteredArr = dojo.filter(dijit.byId("selectDistrict").getOptions(), function (a) { return a.selected }), filteredArr[0].selected && filteredArr[0].disabled && (filteredA = dojo.filter(dijit.byId("selectDistrict").getOptions(), function (b) { return a = b.value.split("|"), !b.disabled && "ALL" === a[1] }), dijit.byId("selectDistrict").set("value", filteredA[0].value, !1)), dstrct = crime_geolayer_filter.value.split("|"), qk = geoLayers[parseInt(dstrct[0])], "ALL" === dstrct[1]) crime_geolayer_filter_district = "ALL", crime_geolayer_filter_field = ""; else switch (lbl = crime_geolayer_filter.label.split(":"), typ = dojo.trim(lbl[0]), crime_geolayer_filter_district = dojo.trim(lbl[1]), typ) { case "IRA": crime_geolayer_filter_field = crime_group_by_part.iraField; break; case "Patrol Zone": crime_geolayer_filter_field = crime_group_by_part.patrolField; break; case "Sector": crime_geolayer_filter_field = crime_group_by_part.sectorField; break; case "District": crime_geolayer_filter_field = crime_group_by_part.districtField } categoryType = dijit.byId("selectCatagory").get("value"), category = categoryType.split("_"), crime_code_category = "ALL" === category[1] ? crime_part : category[1], crime_code_category_SOE = category[1], crime_code_category_abbr = category[2], log("crime_part: " + crime_part), log("crime_shift: " + crime_shift), log("crime_geolayer_filter: " + crime_geolayer_filter.value), log("crime_geolayer_filter_district: " + crime_geolayer_filter_district), log("crime_geolayer_filter_field: " + crime_geolayer_filter_field), log("crime_code_category: " + crime_code_category), log("crime_code_category_abbr: " + crime_code_category_abbr) } function getMainStatsValue() { for (var a = dojo.query(".btnMainStats"), b = 0, c = a.length; b < c; b++) { nm = a[b].attributes[2].value; dijit.byId(nm); if (dijit.byId(nm).checked) return dijit.byId(nm).value } } function getGeoLayer() { return filteredArr = dojo.filter(dijit.byId("selectDistrict").getOptions(), function (a) { return a.selected }), filteredArr[0] } function getSummaryTableConfig(a, b, c) { return filteredArr = dojo.filter(c.items, function (c) { return c.part == a && c.eventTitle == b }), filteredArr } function getCategoryCount(a, b) { return filteredArr = dojo.filter(a, function (a) { return a.category == b }), filteredArr[0].y } function buildSummaryTable(a) { showLW("divWorking_Summary"); try { esri.request({ url: adminSOE + "getSummary", handleAs: "json", content: { titles: "TDY LYWK WTD MTD YTD", group: crime_part, zonefield: crime_geolayer_filter_field, zone: crime_geolayer_filter_district, shift: crime_shift, f: "json" }, callbackParamName: "callback", load: function (b, c) { TDY_categories = getSummaryTableConfig(crime_part, "TDY", b), LYWK_categories = getSummaryTableConfig(crime_part, "LYWK", b), WTD_categories = getSummaryTableConfig(crime_part, "WTD", b), MTD_categories = getSummaryTableConfig(crime_part, "MTD", b), YTD_categories = getSummaryTableConfig(crime_part, "YTD", b), sortAry = [], dojo.forEach(LYWK_categories, function (a, b) { sortAry.push({ Category: a.category, abbr: a.abbr, TDY: TDY_categories[b].y, LYWK: LYWK_categories[b].y, WTD: WTD_categories[b].y, MTD: MTD_categories[b].y, YTD: YTD_categories[b].y }) }), evt = dijit.byId("selectSummarySort_" + a).get("value"), stval = evt.split(":"), sortAry = sortByKey(sortAry, stval[0], stval[1]), buildFinalTable(a, stval, sortAry), hideLW("divWorking_Summary") }, error: function (a, b) { eh(a, "getSummary_summary") } }) } catch (a) { eh(a, "buildSummaryTable") } finally { } } function buildFinalTable(a, b, c) {
    RemoveChildren(dojo.byId(a)); var d = dojo.create("table", { class: "summaryTable_" + a }, null, "only"), e = dojo.create("tbody", null, d); row = dojo.create("tr", null, e, "last"), td = dojo.create("td", {
        innerHTML: "Category",
        class: "Category" == b[0] ? "cellHeaderSorted_" + a : "cellHeader_" + a
    }, row, "last"), td.onclick = function () { dijit.byId("selectSummarySort_" + a).set("value", "Category:A") }, td = dojo.create("td", { innerHTML: "MaxContent" == a ? "Today" : "TDY", class: "TDY" == b[0] ? "cellHeaderSorted_" + a : "cellHeader_" + a }, row, "last"), td.onclick = function () { dijit.byId("selectSummarySort_" + a).set("value", "TDY:D") }, td = dojo.create("td", { innerHTML: "MaxContent" == a ? "Last Year Week" : "LYWK", class: "LYWK" == b[0] ? "cellHeaderSorted_" + a : "cellHeader_" + a }, row, "last"), td.onclick = function () { dijit.byId("selectSummarySort_" + a).set("value", "LYWK:D") }, td = dojo.create("td", { innerHTML: "MaxContent" == a ? "Week To Date" : "WTD", class: "WTD" == b[0] ? "cellHeaderSorted_" + a : "cellHeader_" + a }, row, "last"), td.onclick = function () { dijit.byId("selectSummarySort_" + a).set("value", "WTD:D") }, td = dojo.create("td", { innerHTML: "MaxContent" == a ? "Month To Date" : "MTD", class: "MTD" == b[0] ? "cellHeaderSorted_" + a : "cellHeader_" + a }, row, "last"), td.onclick = function () { dijit.byId("selectSummarySort_" + a).set("value", "MTD:D") }, td = dojo.create("td", { innerHTML: "MaxContent" == a ? "Year To Date" : "YTD", class: "YTD" == b[0] ? "cellHeaderSorted_" + a : "cellHeader_" + a }, row, "last"), td.onclick = function () { dijit.byId("selectSummarySort_" + a).set("value", "YTD:D") }, dojo.forEach(c, function (b, c) { row = dojo.create("tr", { class: b.Category == crime_summary_selected_category ? "cellSelected" : "" }, e, "last"), c % 2 == 0 ? roe = " cellEven" : roe = " cellOdd", td = dojo.create("td", { innerHTML: "MaxContent" == a ? b.Category : b.Category + " (" + b.abbr + ")", class: "cellCategory_" + a + roe }, row, "last"), td.setAttribute("abbr", b.abbr), "ChartToDateSummary" == a && (td.onclick = function () { var a = this.getAttribute("abbr"); opts = dijit.byId("selectCatagory").getOptions(), filteredArr = dojo.filter(opts, function (b) { return ary = b.value.split("_"), ary[2] == a }), crime_summary_selected_category = filteredArr[0].label, dijit.byId("selectCatagory").set("value", filteredArr[0].value) }), dojo.create("td", { innerHTML: numberWithCommas(b.TDY), class: "cellNumbers" + roe }, row, "last"), dojo.create("td", { innerHTML: numberWithCommas(b.LYWK), class: "cellNumbers" + roe }, row, "last"), dojo.create("td", { innerHTML: numberWithCommas(b.WTD), class: "cellNumbers" + roe }, row, "last"), dojo.create("td", { innerHTML: numberWithCommas(b.MTD), class: "cellNumbers" + roe }, row, "last"), dojo.create("td", { innerHTML: numberWithCommas(b.YTD), class: "cellNumbers" + roe }, row, "last") }), dojo.byId("lbl" + a).innerHTML = crime_part + " To Date (" + crime_geolayer_filter_district + ")", dojo.byId(a).appendChild(d)
} function reloadData(a) { try { closeMax_onclick(), getAnalysisVars(), buildPie("ChartPie"), buildSummaryTable("ChartToDateSummary"), setLyrDefs(), buildHistogram("MainHistogram"), toggleLayerVisibility(), mapChartRenderType_onChange(dijit.byId("mapChartRenderType").get("value")) } catch (a) { eh(a, "reloadData") } } function IsNumeric(a) { return Number(parseFloat(a)) === a } function cleanUp() { mapChart.infoWindow.hide(), clusterLayer.clearSingles() } function tick() { var a = (new Date).getMinutes(); "00" != a && "30" != a || reloadData(null) } function buildInititalCharts() { try { updateWorking("loading initial chart data ..."), sel = new dijit.form.Select({ id: "chartHistogram_MainHistogram", name: "chartHistogram_MainHistogram", style: "width: 55px", autoWidth: !1, options: [{ value: "BAR_DAY", label: "<img width='16px' height='16px' src='img/columns.png' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by day</label>", selected: !0 }, { value: "LINE_DAY", label: "<img width='16px' height='16px' src='img/lines.png' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by day</label>" }, { value: "BAR_WEEK", label: "<img width='16px' height='16px' src='img/columns.png' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by 52 wk</label>", selected: !0 }, { value: "LINE_WEEK", label: "<img width='16px' height='16px' src='img/lines.png'  style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by 52 wk</label>" }], onChange: function (a) { "BAR_DAY" === a || "LINE_DAY" === a ? (dojo.replaceClass("pane52Week", "gcPaneBorderBackgound", "gcPaneBorderBackgound_Hist"), dojo.replaceClass("pane52WeekTitle", "gcTitlePaneBackground", "gcTitlePaneBackground_Hist"), dojo.replaceClass("pane52WeekBottom", "gcTitlePaneBackgroundBottom", "gcTitlePaneBackgroundBottom_Hist"), dojo.replaceClass("paneHeatIndex", "gcPaneBorderBackgound", "gcPaneBorderBackgound_Hist"), dojo.replaceClass("paneHeatIndexTitle", "gcTitlePaneBackground", "gcTitlePaneBackground_Hist"), dojo.replaceClass("paneHeatIndexBottom", "gcTitlePaneBackgroundBottom", "gcTitlePaneBackgroundBottom_Hist")) : (dojo.replaceClass("pane52Week", "gcPaneBorderBackgound_Hist", "gcPaneBorderBackgound"), dojo.replaceClass("pane52WeekTitle", "gcTitlePaneBackground_Hist", "gcTitlePaneBackground"), dojo.replaceClass("pane52WeekBottom", "gcTitlePaneBackgroundBottom_Hist", "gcTitlePaneBackgroundBottom"), dojo.replaceClass("paneHeatIndex", "gcPaneBorderBackgound_Hist", "gcPaneBorderBackgound"), dojo.replaceClass("paneHeatIndexTitle", "gcTitlePaneBackground_Hist", "gcTitlePaneBackground"), dojo.replaceClass("paneHeatIndexBottom", "gcTitlePaneBackgroundBottom_Hist", "gcTitlePaneBackgroundBottom")), buildHistogram("MainHistogram") } }), dojo.byId("tdChartHistogram_Main").appendChild(sel.domNode), sel.startup(), sel = new dijit.form.Select({ id: "chartHistogram_MaxContent", name: "chartHistogram_MaxContent", options: [{ value: "BAR_DAY", label: "<img width='16px' height='16px' src='img/columns.png' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by day</label>", selected: !0 }, { value: "LINE_DAY", label: "<img width='16px' height='16px' src='img/lines.png' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by day</label>" }, { value: "BAR_WEEK", label: "<img width='16px' height='16px' src='img/columns.png' style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by 52 wk</label>", selected: !0 }, { value: "LINE_WEEK", label: "<img width='16px' height='16px' src='img/lines.png'  style='vertical-align: middle;'/><label style='vertical-align: middle; padding-left: 4px;'>by 52 wk</label>" }], onChange: function (a) { buildHistogram("MaxContent") } }), dojo.byId("tdChartHistogram_MaxContent").appendChild(sel.domNode), sel.startup(), sel = new dijit.form.Select({ id: "selectPie_ChartPie", name: "selectPie_ChartPie", style: "width: 60px", autoWidth: !1, options: [{ value: "BAR", label: "<img width='16px' height='16px' src='img/bars.png' style='vertical-align: middle;'/>", selected: !0 }, { value: "PIE", label: "<img width='16px' height='16px' src='img/pie.png'/>" }], onChange: function (a) { buildPie("ChartPie") } }), dojo.byId("tdSelectPie").appendChild(sel.domNode), sel.startup(), sel = new dijit.form.Select({ id: "selectPie_MaxContent", name: "selectPie_MaxContent", options: [{ value: "BAR", label: "<img width='16px' height='16px' src='img/bars.png' style='vertical-align: middle;'/>", selected: !0 }, { value: "PIE", label: "<img width='16px' height='16px' src='img/pie.png'/>" }], onChange: function (a) { buildPie("MaxContent") } }), dojo.byId("tdChartPie_MaxContent").appendChild(sel.domNode), sel.startup(), dijit.byId("selectPie_MaxContent").set("options", [{ value: "BAR", label: "<img width='16px' height='16px' src='img/bars.png' style='vertical-align: middle;'/>", selected: !0 }, { value: "PIE", label: "<img width='16px' height='16px' src='img/pie.png'/>" }]), sel = new dijit.form.Select({ id: "selectHeatChart_MainHeatTable", name: "selectHeatChart_MainHeatTable", style: "width: 55px", autoWidth: !1, options: [{ value: "HEATINDEXGRID", label: "<img width='16px' height='16px' src='img/grid.png' style='vertical-align: middle;'/>", selected: !0 }, { value: "HEATINDEXLINE", label: "<img width='16px' height='16px' src='img/lines.png'/>" }], onChange: selectHeatChart_onChange }), dojo.byId("tdSelectHeatChart_MainHeatTable").appendChild(sel.domNode), sel.startup(), sel = new dijit.form.Select({ id: "selectHeatChart_MaxContent", name: "selectHeatChart_MaxContent", options: [{ value: "HEATINDEXGRID", label: "<img width='16px' height='16px' src='img/grid.png' style='vertical-align: middle;'/>", selected: !0 }, { value: "HEATINDEXLINE", label: "<img width='16px' height='16px' src='img/lines.png'/>" }], onChange: selectHeatChartMaxContent_onChange }), dojo.byId("tdSelectHeatChart_MaxContent").appendChild(sel.domNode), sel.startup(), sel = new dijit.form.Select({ id: "selectSummarySort_ChartToDateSummary", name: "selectSummarySort_ChartToDateSummary", style: "width: 55px", autoWidth: !1, options: [{ value: "Category:A", label: "Category", selected: !0 }, { value: "TDY:D", label: "Today" }, { value: "LYWK:D", label: "Week Last Year" }, { value: "WTD:D", label: "Week To Date" }, { value: "MTD:D", label: "Month To Date" }, { value: "YTD:D", label: "Year To Date" }], onChange: function (a) { buildSummaryTable("ChartToDateSummary") } }), dojo.byId("tdSummarySort").appendChild(sel.domNode), sel.startup(), getAnalysisVars(), setLyrDefs(), buildPie("ChartPie"), buildSummaryTable("ChartToDateSummary"), buildHistogram("MainHistogram"), toggleLayerVisibility() } catch (a) { eh(a, "buildInititalCharts") } } function setLyrDefs() { log("setting layer definitions ..."); try { lv_grp = getGroupByPart(crime_part, dataConfig[0]), weeklyr = mapChart.getLayer(crime_part + " 52 weeks"), filteredAry = dojo.filter(lv_grp.events, function (a) { return a.eventTitle == crime_days }), lv_event = filteredAry[0], daylyr = mapChart.getLayer(crime_part + " " + crime_days), lv_categoryType = dijit.byId("selectCatagory").get("value"), lv_category = lv_categoryType.split("_"), f_category = "ALL" == lv_category[1] ? crime_part : lv_category[1], codeField = getCodeFieldByPart(crime_part, dataConfig[0]), byCode = "", "ALL" != lv_category[1] && (codes = findCategoryCodes(crime_part, lv_category[1], dataConfig[0]), byCode = codeField + " IN (" + codes + ")"), lv_gl = getGeoLayer(), lv_dstrct = lv_gl.value.split("|"), shifts = "", "ALL" !== crime_shift && "" !== lv_grp.shiftField ? shifts = lv_grp.table + "." + lv_grp.shiftField + " IN ('" + crime_shift.split(",").join("','") + "')" : "ALL" !== crime_shift && "" === lv_grp.shiftField, dClause = "", "ALL" != lv_dstrct[1] && (lv_lbl = lv_gl.label.split(":"), lv_district = dojo.trim(lv_lbl[1]), lv_field = getGeoEventField(crime_part), "" != lv_field && (dClause = lv_field + " = '" + lv_district + "'")), dayparts = crime_days.split(" "), startDate = getStartDate_BCS(parseInt(dayparts[0])), endDate = dojo.date.locale.format(new Date, { selector: "date", datePattern: "yyyyMMdd" }); var a = "(" + lv_grp.table + ".BCS_YMD >= " + startDate + " AND " + lv_grp.table + ".BCS_YMD < " + endDate + ")"; a += "" == a ? dClause ? dClause : "" : dClause ? " AND " + dClause : "", a += "" == a ? byCode ? byCode : "" : byCode ? " AND " + byCode : "", a += "" == a ? shifts ? shifts : "" : shifts ? " AND " + shifts : ""; var b = ""; b += "" == b ? dClause ? dClause : "" : dClause ? " AND " + dClause : "", b += "" == b ? byCode ? byCode : "" : byCode ? " AND " + byCode : "", b += "" == b ? shifts ? shifts : "" : shifts ? " AND " + shifts : "", log(a), a ? a !== daylyr.getDefinitionExpression() && daylyr.setDefinitionExpression(a) : daylyr.setDefinitionExpression(null), b ? b !== weeklyr.getDefinitionExpression() && weeklyr.setDefinitionExpression(b) : weeklyr.setDefinitionExpression(null) } catch (a) { eh(a, "setLyrDefs") } } function getDOYfromAttribute(a) { var b = new Date(a), c = b.getTimezoneOffset(); b.setTime(b.getTime() + 60 * c * 1e3); var d = new Date(b.getFullYear(), 0, 1), e = Math.floor(d / 864e5), f = Math.ceil(b.getTime() / 864e5); return f - e } function databaseDate(a) { var b = new Date(a), c = b.getTimezoneOffset(); return dojo.date.add(b, "minute", c) } function calcOffset() { return mapChart.extent.getWidth() / mapChart.width } function getStartDate_BCS(a) { var b = new Date; return b.setTime(b.getTime() - 24 * a * 60 * 60 * 1e3), dojo.date.locale.format(b, { selector: "date", datePattern: "yyyyMMdd" }) } function rgba(a, b, c, d) { return "rgba(" + a + "," + b + "," + c + "," + d + ")" } function ColorLuminance(a, b) { a = String(a).replace(/[^0-9a-f]/gi, ""), a.length < 6 && (a = a[0] + a[0] + a[1] + a[1] + a[2] + a[2]), b = b || 0; var d, e, c = "#"; for (e = 0; e < 3; e++) d = parseInt(a.substr(2 * e, 2), 16), d = Math.round(Math.min(Math.max(0, d + d * b), 255)).toString(16), c += ("00" + d).substr(d.length); return c } function swapStyleSheet(a, b) { document.getElementById(a).setAttribute("href", b) } function RemoveChildren(a) { require(["dojo/dom-construct"], function (b) { a && b.empty(a.id) }) } function blur() { require(["dijit/focus"], function (a) { a.curNode && a.curNode.blur() }) } function numberWithCommas(a) { return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") } function getDateOfWeek(a, b) { return new Date(b, 0, 1 + 7 * (a - 1)) } function roundNumber(a, b) { try { if (!b) return Math.round(a); if (0 == a) { for (var c = "", d = 0; d < b; d++) c += "0"; return "0." + c } var e = Math.pow(10, b), f = Math.round(a * e).toString(); return f.slice(0, -1 * b) + "." + f.slice(-1 * b) } catch (a) { eh(a, "roundNumber") } } function sortByKey(a, b, c) { return a.sort(function (a, d) { var e = a[b], f = d[b]; return "string" == typeof e && (e = dojo.trim(e.toLowerCase()), f = dojo.trim(f.toLowerCase())), "A" == c ? e < f ? -1 : e > f ? 1 : 0 : e > f ? -1 : e < f ? 1 : 0 }) } function returnDateWithOffset(a) { var b = new Date(a), c = b.getTimezoneOffset(); return dojo.date.add(b, "minute", c) } function formatDateIW(a, b, c) { var d; if (d = a instanceof Array ? a[0] : a, null == d || "null" == d || "" == d) return '<font color="#C0C0C0"><em>null</em></font>'; var e = new Date(d), f = e.getTimezoneOffset(), g = dojo.date.add(e, "minute", f); return dojo.date.locale.format(g, { selector: "date", datePattern: "yyyy-MM-dd" }) } function openMax_onclick(a) { switch (RemoveChildren(dojo.byId("MaxContent")), aryOfTDs = ["tdChartHistogram_MaxContent", "tdSummarySort_MaxContent", "tdChartPie_MaxContent", "tdSelectHeatChart_MaxContent", "tdWeekDaySelector_MaxContent"], dojo.forEach(aryOfTDs, function (a) { dojo.byId(a).style.display = "none" }), dojo.byId("dialogMaximize").style.display = "block", dojo.replaceClass("dialogMaximize", "opacityShowAnimation", "opacityHideAnimation"), dojo.replaceClass("divMaximize", "showContainer", "hideContainer"), a) { case "Summary": dojo.byId("tdSummarySort_MaxContent").style.display = "block", buildSummaryTable("MaxContent"), dojo.byId("MaxContent").style.overflow = "auto"; break; case "Pie": dojo.byId("tdChartPie_MaxContent").style.display = "block", val = dijit.byId("selectPie_ChartPie").get("value"), dijit.byId("selectPie_MaxContent").set("value", val), buildPie("MaxContent"), dojo.byId("MaxContent").style.overflow = "hidden"; break; case "HeatChartDays": dojo.byId("tdSelectHeatChartDays_MaxContent").style.display = "block", "HEATINDEXGRID" === dijit.byId("selectHeatChartDays_MainHeatTableDays").get("value") ? (dojo.byId("tdWeekDaySelectorDays_MaxContent").style.display = "none", buildHeatIndexDays("MaxContent")) : (dojo.byId("tdWeekDaySelectorDays_MaxContent").style.display = "block", buildTimeLineDays("MaxContent")), dojo.byId("MaxContent").style.overflow = "hidden"; break; case "LastDays": dojo.byId("tdChartTypeLastDays_MaxContent").style.display = "block", dijit.byId("chartTypeLastDays_MaxContent").set("value", dijit.byId("chartTypeLastDays_MainLastDays").get("value")), buildLastDays("MaxContent"), dojo.byId("MaxContent").style.overflow = "hidden"; break; case "52Weeks": dojo.byId("tdChartHistogram_MaxContent").style.display = "block", dijit.byId("chartHistogram_MaxContent").set("value", dijit.byId("chartHistogram_MainHistogram").get("value")), buildHistogram("MaxContent"), dojo.byId("MaxContent").style.overflow = "hidden"; break; case "HeatChart": dojo.byId("tdSelectHeatChart_MaxContent").style.display = "block", "HEATINDEXGRID" === dijit.byId("selectHeatChart_MainHeatTable").get("value") ? (dojo.byId("tdWeekDaySelector_MaxContent").style.display = "none", buildHeatIndex("MaxContent")) : (dojo.byId("tdWeekDaySelector_MaxContent").style.display = "block", buildTimeLine("MaxContent")), dojo.byId("MaxContent").style.overflow = "hidden" } dijit.byId("divMaximize").resize() } function closeMax_onclick() { buildPie("ChartPie"), RemoveChildren(dojo.byId("MaxContent")), dojo.replaceClass("divMaximize", "hideContainer", "showContainer"), dojo.replaceClass("dialogMaximize", "opacityHideAnimation", "opacityShowAnimation"), aryOfTDs = ["tdChartHistogram_MaxContent", "tdSummarySort_MaxContent", "tdChartPie_MaxContent", "tdSelectHeatChart_MaxContent"], dojo.forEach(aryOfTDs, function (a) { dojo.byId(a).style.display = "none" }) } var linesColumns = null, regressionMenu = null, chartDayTime = null, daytime = null, trendType = { name: "polynomial", order: 3 }, chartPie = null, chartPieLegend = null, mapChart = null, shiftOptions = null, crime_part, crime_shift, crime_geolayer_filter, crime_geolayer_filter_district, crime_geolayer_filter_field, crime_group_by_part, crime_code_category, crime_code_category_SOE, crime_code_category_abbr, crime_days, crime_summary_selected_category = null, geometryService = null; !function () { "use strict"; var a = function (a, b) { var c = 0, d = 0, e = 0, f = 0, g = 0, h = a.length - 1, i = new Array(b); for (c = 0; c < h; c++) { for (f = c, d = c + 1; d < h; d++) Math.abs(a[c][d]) > Math.abs(a[c][f]) && (f = d); for (e = c; e < h + 1; e++) g = a[e][c], a[e][c] = a[e][f], a[e][f] = g; for (d = c + 1; d < h; d++) for (e = h; e >= c; e--) a[e][d] -= a[e][c] * a[c][d] / a[c][c] } for (d = h - 1; d >= 0; d--) { for (g = 0, e = d + 1; e < h; e++) g += a[e][d] * i[e]; i[d] = (a[h][d] - g) / a[d][d] } return i }, b = function (a) { for (var b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = a.length; h < i; h++) b += a[h][0], c += a[h][1], d += a[h][0] * a[h][1], e += a[h][0] * a[h][0], f += a[h][1] * a[h][1]; return g = (a.length * d - b * c) / Math.sqrt((a.length * e - b * b) * (a.length * f - c * c)) }, c = { linear: function (a) { for (var c = [0, 0, 0, 0, 0], d = 0, e = []; d < a.length; d++) null != a[d][1] && (c[0] += a[d][0], c[1] += a[d][1], c[2] += a[d][0] * a[d][0], c[3] += a[d][0] * a[d][1], c[4] += a[d][1] * a[d][1]); for (var f = (d * c[3] - c[0] * c[1]) / (d * c[2] - c[0] * c[0]), g = c[1] / d - f * c[0] / d, h = [], i = 0, j = a.length; i < j; i++) { var k = [a[i][0], a[i][0] * f + g]; e.push(k), h.push(k[1]) } var l = "y = " + Math.round(100 * f) / 100 + "x + " + Math.round(100 * g) / 100; return { equation: [f, g], points: e, string: l, series: h, correlationCoefficient: b(a), trendDirection: f > 0 ? "UP" : "DOWN" } }, linearThroughOrigin: function (a) { for (var b = [0, 0], c = 0, d = []; c < a.length; c++) null != a[c][1] && (b[0] += a[c][0] * a[c][0], b[1] += a[c][0] * a[c][1]); for (var e = b[1] / b[0], f = [], g = 0, h = a.length; g < h; g++) { var i = [a[g][0], a[g][0] * e]; d.push(i), f.push(i[1]) } var j = "y = " + Math.round(100 * e) / 100 + "x"; return { equation: [e], points: d, string: j, series: f } }, exponential: function (a) { var b = [0, 0, 0, 0, 0, 0], c = 0, d = []; for (j = a.length; c < j; c++) null != a[c][1] && (b[0] += a[c][0], b[1] += a[c][1], b[2] += a[c][0] * a[c][0] * a[c][1], b[3] += a[c][1] * Math.log(a[c][1]), b[4] += a[c][0] * a[c][1] * Math.log(a[c][1]), b[5] += a[c][0] * a[c][1]); for (var e = b[1] * b[2] - b[5] * b[5], f = Math.pow(Math.E, (b[2] * b[3] - b[5] * b[4]) / e), g = (b[1] * b[4] - b[5] * b[3]) / e, h = [], i = 0, j = a.length; i < j; i++) { var k = [a[i][0], f * Math.pow(Math.E, g * a[i][0])]; d.push(k), h.push(k[1]) } var l = "y = " + Math.round(100 * f) / 100 + "e^(" + Math.round(100 * g) / 100 + "x)"; return { equation: [f, g], points: d, string: l, series: h } }, logarithmic: function (a) { var b = [0, 0, 0, 0], c = 0, d = []; for (i = a.length; c < i; c++) null != a[c][1] && (b[0] += Math.log(a[c][0]), b[1] += a[c][1] * Math.log(a[c][0]), b[2] += a[c][1], b[3] += Math.pow(Math.log(a[c][0]), 2)); for (var e = (c * b[1] - b[2] * b[0]) / (c * b[3] - b[0] * b[0]), f = (b[2] - e * b[0]) / c, g = [], h = 0, i = a.length; h < i; h++) { var j = [a[h][0], f + e * Math.log(a[h][0])]; d.push(j), g.push(j[1]) } var k = "y = " + Math.round(100 * f) / 100 + " + " + Math.round(100 * e) / 100 + " ln(x)"; return { equation: [f, e], points: d, string: k, series: g } }, power: function (a) { var b = [0, 0, 0, 0], c = 0, d = []; for (i = a.length; c < i; c++) null != a[c][1] && (b[0] += Math.log(a[c][0]), b[1] += Math.log(a[c][1]) * Math.log(a[c][0]), b[2] += Math.log(a[c][1]), b[3] += Math.pow(Math.log(a[c][0]), 2)); for (var e = (c * b[1] - b[2] * b[0]) / (c * b[3] - b[0] * b[0]), f = Math.pow(Math.E, (b[2] - e * b[0]) / c), g = [], h = 0, i = a.length; h < i; h++) { var j = [a[h][0], f * Math.pow(a[h][0], e)]; d.push(j), g.push(j[1]) } var k = "y = " + Math.round(100 * f) / 100 + "x^" + Math.round(100 * e) / 100; return { equation: [f, e], points: d, string: k, series: g } }, polynomial: function (b, c) { "undefined" == typeof c && (c = 2); for (var d = [], e = [], f = [], g = 0, h = 0, i = 0, j = c + 1; i < j; i++) { for (var k = 0, l = b.length; k < l; k++) null != b[k][1] && (g += Math.pow(b[k][0], i) * b[k][1]); d.push(g), g = 0; for (var m = [], n = 0; n < j; n++) { for (var k = 0, l = b.length; k < l; k++) null != b[k][1] && (h += Math.pow(b[k][0], i + n)); m.push(h), h = 0 } e.push(m) } e.push(d); for (var o = a(e, j), p = [], i = 0, l = b.length; i < l; i++) { for (var q = 0, r = 0; r < o.length; r++) q += o[r] * Math.pow(b[i][0], r); f.push([b[i][0], q]), p.push(q) } for (var s = "y = ", i = o.length - 1; i >= 0; i--) s += i > 1 ? Math.round(o[i] * Math.pow(10, i)) / Math.pow(10, i) + "x^" + i + " + " : 1 == i ? Math.round(100 * o[i]) / 100 + "x + " : Math.round(100 * o[i]) / 100; return { equation: o, points: f, string: s, series: p } }, lastvalue: function (a) { for (var b = [], c = null, d = [], e = 0; e < a.length; e++) a[e][1] ? (c = a[e][1], b.push([a[e][0], a[e][1]]), d.push(a[e][0])) : (b.push([a[e][0], c]), d.push(a[e][0])); return { equation: [c], points: b, string: "" + c, series: d } } }, d = function (a, b, d) { if ("string" == typeof a) return c[a](b, d) }; "undefined" != typeof exports ? module.exports = d : window.regression = d }(), require(["dojo/parser", "dojo/_base/event", "dojo/ready", "dojo/dom", "dojo/window", "dojo/_base/array", "esri/urlUtils", "esri/tasks/locator", "esri/map", "esri/dijit/HomeButton", "esri/dijit/LocateButton", "esri/layers/FeatureLayer", "esri/tasks/query", "esri/layers/LabelLayer", "esri/dijit/Popup", "esri/layers/LabelClass", "esri/symbols/SimpleFillSymbol", "esri/tasks/ProjectParameters", "esri/symbols/TextSymbol", "esri/renderers/UniqueValueRenderer", "esri/renderers/ClassBreaksRenderer", "esri/renderers/HeatmapRenderer", "esri/layers/StreamLayer", "esri/layers/GraphicsLayer", "esri/symbols/PictureMarkerSymbol", "esri/tasks/query", "esri/tasks/geometry", "dojo/promise/all", "dojo/DeferredList", "dojo/Deferred", "dojo/date/locale", "dojo/_base/json", "dijit/registry", "dijit/popup", "dijit/Dialog", "dijit/Tooltip", "dijit/form/Button", "dijit/form/DropDownButton", "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dijit/layout/LayoutContainer", "dijit/form/TextBox", "dijit/form/Select", "dojo/cookie", "dojox/lang/functional", "dojox/lang/functional/lambda", "dojox/lang/functional/curry", "dojox/lang/functional/fold", "dojox/charting/Chart", "dojox/charting/plot2d/Pie", "dojox/charting/plot2d/Columns", "dojox/charting/plot2d/Lines", "dojox/charting/action2d/Magnify", "dojox/charting/themes/Chris", "dojox/charting/themes/Tom", "dojox/charting/themes/Claro", "dojox/charting/themes/Electric", "dojox/charting/DataChart", "dojox/charting/action2d/Highlight", "dojox/charting/action2d/Tooltip", "dojox/charting/action2d/MoveSlice", "dojox/charting/widget/Legend", "dojox/gfx/gradutils", "dojox/charting/widget/SelectableLegend", "dojox/layout/GridContainerLite", "dijit/TitlePane"], function (a, b, c, d, e) { c(function () { a.parse(); var b = e.getBox(); b.h > b.w ? document.getElementsByTagName("body")[0].style.transform = "rotate(90deg)" : document.getElementsByTagName("body")[0].style.transform = "none"; var c = "onorientationchange" in window, d = c ? "orientationchange" : "resize"; if (window.addEventListener(d, function (a) { log("Orientation changed: " + window.orientation); var b = e.getBox(); b.h > b.w ? document.getElementsByTagName("body")[0].style.transform = "rotate(90deg)" : document.getElementsByTagName("body")[0].style.transform = "none"; var c = dijit.byId("GC1"); dijit.byId("divMainContainer").resize(), dijit.byId("divMainContainer").layout(), dijit.byId("GC1").resize({ w: c.w, h: c.h }), dijit.byId("GC1").layout(), dijit.byId("chartPie").resize(), dijit.byId("Main52Weeks").resize(), dijit.byId("MainHeatTable").resize(), chartDayTime && chartDayTime.resize(), chartPie && chartPie.resize(), chartPieLegend && chartPieLegend.refresh(), linesColumns && linesColumns.resize(), mapChart && (mapChart.infoWindow.hide(), mapChart.reposition(), mapChart.resize()), mapClassBreak && (mapClassBreak.infoWindow.hide(), mapClassBreak.reposition(), mapClassBreak.resize()) }, !1), dojo.isIE < 10) return void (window.location = "ie8.htm"); showWorking("loading ..."); var b = e.getBox(); smallWin = b.w < 1200, smallWin && swapStyleSheet("summary_css", "css/summary_small.css"), getVars().then(function (a) { loadTypes(a), setTimeout(function () { tick() }, 6e4) }, function (a) { log("ERROR: " + a.message) }) }) }), Date.prototype.getDOY = function () { var a = new Date(this.getFullYear(), 0, 1), b = Math.floor(a / 864e5), c = Math.ceil(this.getTime() / 864e5); return c - b }, Date.prototype.getWeek = function () { var a = new Date(this.getFullYear(), 0, 1); return Math.ceil(((this - a) / 864e5 + a.getDay() + 1) / 7) }; var DataGrouper = function () { var a = function (a, b) { return _.any(a, function (a) { return _.isEqual(a, b) }) }, b = function (b, c) { return _.reduce(b, function (b, d) { var e = _.pick(d, c); return a(b, e) || b.push(e), b }, []) }, c = function (a, c) { var d = b(a, c); return _.map(d, function (b) { return { key: b, vals: _.map(_.where(a, b), function (a) { return _.omit(a, c) }) } }) }; return c.register = function (a, b) { return c[a] = function (a, d) { return _.map(c(a, d), b) } }, c }();